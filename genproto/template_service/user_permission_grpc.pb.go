// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.17.3
// source: user_permission.proto

package template_service

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// UserPermissionServiceClient is the client API for UserPermissionService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type UserPermissionServiceClient interface {
	// user permission rpc methods
	CreateUserPermission(ctx context.Context, in *CreateUserPermissionReq, opts ...grpc.CallOption) (*UserPermission, error)
	GetListUserPermission(ctx context.Context, in *GetListUserPermissionReq, opts ...grpc.CallOption) (*GetListUserPermissionRes, error)
	GetSingleUserPermission(ctx context.Context, in *GetSingleUserPermissionReq, opts ...grpc.CallOption) (*UserPermission, error)
	UpdateUserPermission(ctx context.Context, in *UpdateUserPermissionReq, opts ...grpc.CallOption) (*UserPermission, error)
	DeleteUserPermission(ctx context.Context, in *DeleteUserPermissionReq, opts ...grpc.CallOption) (*emptypb.Empty, error)
}

type userPermissionServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewUserPermissionServiceClient(cc grpc.ClientConnInterface) UserPermissionServiceClient {
	return &userPermissionServiceClient{cc}
}

func (c *userPermissionServiceClient) CreateUserPermission(ctx context.Context, in *CreateUserPermissionReq, opts ...grpc.CallOption) (*UserPermission, error) {
	out := new(UserPermission)
	err := c.cc.Invoke(ctx, "/user_permission_service.UserPermissionService/CreateUserPermission", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userPermissionServiceClient) GetListUserPermission(ctx context.Context, in *GetListUserPermissionReq, opts ...grpc.CallOption) (*GetListUserPermissionRes, error) {
	out := new(GetListUserPermissionRes)
	err := c.cc.Invoke(ctx, "/user_permission_service.UserPermissionService/GetListUserPermission", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userPermissionServiceClient) GetSingleUserPermission(ctx context.Context, in *GetSingleUserPermissionReq, opts ...grpc.CallOption) (*UserPermission, error) {
	out := new(UserPermission)
	err := c.cc.Invoke(ctx, "/user_permission_service.UserPermissionService/GetSingleUserPermission", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userPermissionServiceClient) UpdateUserPermission(ctx context.Context, in *UpdateUserPermissionReq, opts ...grpc.CallOption) (*UserPermission, error) {
	out := new(UserPermission)
	err := c.cc.Invoke(ctx, "/user_permission_service.UserPermissionService/UpdateUserPermission", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userPermissionServiceClient) DeleteUserPermission(ctx context.Context, in *DeleteUserPermissionReq, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/user_permission_service.UserPermissionService/DeleteUserPermission", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// UserPermissionServiceServer is the server API for UserPermissionService service.
// All implementations must embed UnimplementedUserPermissionServiceServer
// for forward compatibility
type UserPermissionServiceServer interface {
	// user permission rpc methods
	CreateUserPermission(context.Context, *CreateUserPermissionReq) (*UserPermission, error)
	GetListUserPermission(context.Context, *GetListUserPermissionReq) (*GetListUserPermissionRes, error)
	GetSingleUserPermission(context.Context, *GetSingleUserPermissionReq) (*UserPermission, error)
	UpdateUserPermission(context.Context, *UpdateUserPermissionReq) (*UserPermission, error)
	DeleteUserPermission(context.Context, *DeleteUserPermissionReq) (*emptypb.Empty, error)
	mustEmbedUnimplementedUserPermissionServiceServer()
}

// UnimplementedUserPermissionServiceServer must be embedded to have forward compatible implementations.
type UnimplementedUserPermissionServiceServer struct {
}

func (UnimplementedUserPermissionServiceServer) CreateUserPermission(context.Context, *CreateUserPermissionReq) (*UserPermission, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateUserPermission not implemented")
}
func (UnimplementedUserPermissionServiceServer) GetListUserPermission(context.Context, *GetListUserPermissionReq) (*GetListUserPermissionRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetListUserPermission not implemented")
}
func (UnimplementedUserPermissionServiceServer) GetSingleUserPermission(context.Context, *GetSingleUserPermissionReq) (*UserPermission, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetSingleUserPermission not implemented")
}
func (UnimplementedUserPermissionServiceServer) UpdateUserPermission(context.Context, *UpdateUserPermissionReq) (*UserPermission, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateUserPermission not implemented")
}
func (UnimplementedUserPermissionServiceServer) DeleteUserPermission(context.Context, *DeleteUserPermissionReq) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteUserPermission not implemented")
}
func (UnimplementedUserPermissionServiceServer) mustEmbedUnimplementedUserPermissionServiceServer() {}

// UnsafeUserPermissionServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to UserPermissionServiceServer will
// result in compilation errors.
type UnsafeUserPermissionServiceServer interface {
	mustEmbedUnimplementedUserPermissionServiceServer()
}

func RegisterUserPermissionServiceServer(s grpc.ServiceRegistrar, srv UserPermissionServiceServer) {
	s.RegisterService(&UserPermissionService_ServiceDesc, srv)
}

func _UserPermissionService_CreateUserPermission_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateUserPermissionReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserPermissionServiceServer).CreateUserPermission(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/user_permission_service.UserPermissionService/CreateUserPermission",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserPermissionServiceServer).CreateUserPermission(ctx, req.(*CreateUserPermissionReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserPermissionService_GetListUserPermission_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetListUserPermissionReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserPermissionServiceServer).GetListUserPermission(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/user_permission_service.UserPermissionService/GetListUserPermission",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserPermissionServiceServer).GetListUserPermission(ctx, req.(*GetListUserPermissionReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserPermissionService_GetSingleUserPermission_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetSingleUserPermissionReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserPermissionServiceServer).GetSingleUserPermission(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/user_permission_service.UserPermissionService/GetSingleUserPermission",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserPermissionServiceServer).GetSingleUserPermission(ctx, req.(*GetSingleUserPermissionReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserPermissionService_UpdateUserPermission_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateUserPermissionReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserPermissionServiceServer).UpdateUserPermission(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/user_permission_service.UserPermissionService/UpdateUserPermission",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserPermissionServiceServer).UpdateUserPermission(ctx, req.(*UpdateUserPermissionReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserPermissionService_DeleteUserPermission_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteUserPermissionReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserPermissionServiceServer).DeleteUserPermission(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/user_permission_service.UserPermissionService/DeleteUserPermission",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserPermissionServiceServer).DeleteUserPermission(ctx, req.(*DeleteUserPermissionReq))
	}
	return interceptor(ctx, in, info, handler)
}

// UserPermissionService_ServiceDesc is the grpc.ServiceDesc for UserPermissionService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var UserPermissionService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "user_permission_service.UserPermissionService",
	HandlerType: (*UserPermissionServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateUserPermission",
			Handler:    _UserPermissionService_CreateUserPermission_Handler,
		},
		{
			MethodName: "GetListUserPermission",
			Handler:    _UserPermissionService_GetListUserPermission_Handler,
		},
		{
			MethodName: "GetSingleUserPermission",
			Handler:    _UserPermissionService_GetSingleUserPermission_Handler,
		},
		{
			MethodName: "UpdateUserPermission",
			Handler:    _UserPermissionService_UpdateUserPermission_Handler,
		},
		{
			MethodName: "DeleteUserPermission",
			Handler:    _UserPermissionService_DeleteUserPermission_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "user_permission.proto",
}
