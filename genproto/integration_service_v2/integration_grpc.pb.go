// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.17.3
// source: integration.proto

package integration_service_v2

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// PaymentIntegrationsServiceClient is the client API for PaymentIntegrationsService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type PaymentIntegrationsServiceClient interface {
	GetAll(ctx context.Context, in *GetAllIntegrationsRequest, opts ...grpc.CallOption) (*GetAllIntegrationsResponse, error)
	Update(ctx context.Context, in *Integration, opts ...grpc.CallOption) (*emptypb.Empty, error)
	Insert(ctx context.Context, in *Integration, opts ...grpc.CallOption) (*InsertIntegrationResponse, error)
	Get(ctx context.Context, in *GetIntegrationRequest, opts ...grpc.CallOption) (*Integration, error)
}

type paymentIntegrationsServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewPaymentIntegrationsServiceClient(cc grpc.ClientConnInterface) PaymentIntegrationsServiceClient {
	return &paymentIntegrationsServiceClient{cc}
}

func (c *paymentIntegrationsServiceClient) GetAll(ctx context.Context, in *GetAllIntegrationsRequest, opts ...grpc.CallOption) (*GetAllIntegrationsResponse, error) {
	out := new(GetAllIntegrationsResponse)
	err := c.cc.Invoke(ctx, "/integration_service_v2.PaymentIntegrationsService/GetAll", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *paymentIntegrationsServiceClient) Update(ctx context.Context, in *Integration, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/integration_service_v2.PaymentIntegrationsService/Update", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *paymentIntegrationsServiceClient) Insert(ctx context.Context, in *Integration, opts ...grpc.CallOption) (*InsertIntegrationResponse, error) {
	out := new(InsertIntegrationResponse)
	err := c.cc.Invoke(ctx, "/integration_service_v2.PaymentIntegrationsService/Insert", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *paymentIntegrationsServiceClient) Get(ctx context.Context, in *GetIntegrationRequest, opts ...grpc.CallOption) (*Integration, error) {
	out := new(Integration)
	err := c.cc.Invoke(ctx, "/integration_service_v2.PaymentIntegrationsService/Get", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// PaymentIntegrationsServiceServer is the server API for PaymentIntegrationsService service.
// All implementations must embed UnimplementedPaymentIntegrationsServiceServer
// for forward compatibility
type PaymentIntegrationsServiceServer interface {
	GetAll(context.Context, *GetAllIntegrationsRequest) (*GetAllIntegrationsResponse, error)
	Update(context.Context, *Integration) (*emptypb.Empty, error)
	Insert(context.Context, *Integration) (*InsertIntegrationResponse, error)
	Get(context.Context, *GetIntegrationRequest) (*Integration, error)
	mustEmbedUnimplementedPaymentIntegrationsServiceServer()
}

// UnimplementedPaymentIntegrationsServiceServer must be embedded to have forward compatible implementations.
type UnimplementedPaymentIntegrationsServiceServer struct {
}

func (UnimplementedPaymentIntegrationsServiceServer) GetAll(context.Context, *GetAllIntegrationsRequest) (*GetAllIntegrationsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAll not implemented")
}
func (UnimplementedPaymentIntegrationsServiceServer) Update(context.Context, *Integration) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Update not implemented")
}
func (UnimplementedPaymentIntegrationsServiceServer) Insert(context.Context, *Integration) (*InsertIntegrationResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Insert not implemented")
}
func (UnimplementedPaymentIntegrationsServiceServer) Get(context.Context, *GetIntegrationRequest) (*Integration, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Get not implemented")
}
func (UnimplementedPaymentIntegrationsServiceServer) mustEmbedUnimplementedPaymentIntegrationsServiceServer() {
}

// UnsafePaymentIntegrationsServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to PaymentIntegrationsServiceServer will
// result in compilation errors.
type UnsafePaymentIntegrationsServiceServer interface {
	mustEmbedUnimplementedPaymentIntegrationsServiceServer()
}

func RegisterPaymentIntegrationsServiceServer(s grpc.ServiceRegistrar, srv PaymentIntegrationsServiceServer) {
	s.RegisterService(&PaymentIntegrationsService_ServiceDesc, srv)
}

func _PaymentIntegrationsService_GetAll_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetAllIntegrationsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PaymentIntegrationsServiceServer).GetAll(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/integration_service_v2.PaymentIntegrationsService/GetAll",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PaymentIntegrationsServiceServer).GetAll(ctx, req.(*GetAllIntegrationsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PaymentIntegrationsService_Update_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Integration)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PaymentIntegrationsServiceServer).Update(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/integration_service_v2.PaymentIntegrationsService/Update",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PaymentIntegrationsServiceServer).Update(ctx, req.(*Integration))
	}
	return interceptor(ctx, in, info, handler)
}

func _PaymentIntegrationsService_Insert_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Integration)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PaymentIntegrationsServiceServer).Insert(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/integration_service_v2.PaymentIntegrationsService/Insert",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PaymentIntegrationsServiceServer).Insert(ctx, req.(*Integration))
	}
	return interceptor(ctx, in, info, handler)
}

func _PaymentIntegrationsService_Get_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetIntegrationRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PaymentIntegrationsServiceServer).Get(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/integration_service_v2.PaymentIntegrationsService/Get",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PaymentIntegrationsServiceServer).Get(ctx, req.(*GetIntegrationRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// PaymentIntegrationsService_ServiceDesc is the grpc.ServiceDesc for PaymentIntegrationsService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var PaymentIntegrationsService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "integration_service_v2.PaymentIntegrationsService",
	HandlerType: (*PaymentIntegrationsServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetAll",
			Handler:    _PaymentIntegrationsService_GetAll_Handler,
		},
		{
			MethodName: "Update",
			Handler:    _PaymentIntegrationsService_Update_Handler,
		},
		{
			MethodName: "Insert",
			Handler:    _PaymentIntegrationsService_Insert_Handler,
		},
		{
			MethodName: "Get",
			Handler:    _PaymentIntegrationsService_Get_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "integration.proto",
}
