// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.17.3
// source: share.proto

package template_service

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// ShareServiceClient is the client API for ShareService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ShareServiceClient interface {
	// user permission rpc methods
	CreateToken(ctx context.Context, in *CreateTokenReq, opts ...grpc.CallOption) (*CreateTokenRes, error)
	UpdateToken(ctx context.Context, in *UpdateTokenReq, opts ...grpc.CallOption) (*UpdateTokenRes, error)
	GetObjectToken(ctx context.Context, in *GetObjectTokenReq, opts ...grpc.CallOption) (*GetObjectTokenRes, error)
}

type shareServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewShareServiceClient(cc grpc.ClientConnInterface) ShareServiceClient {
	return &shareServiceClient{cc}
}

func (c *shareServiceClient) CreateToken(ctx context.Context, in *CreateTokenReq, opts ...grpc.CallOption) (*CreateTokenRes, error) {
	out := new(CreateTokenRes)
	err := c.cc.Invoke(ctx, "/share_service.ShareService/CreateToken", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *shareServiceClient) UpdateToken(ctx context.Context, in *UpdateTokenReq, opts ...grpc.CallOption) (*UpdateTokenRes, error) {
	out := new(UpdateTokenRes)
	err := c.cc.Invoke(ctx, "/share_service.ShareService/UpdateToken", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *shareServiceClient) GetObjectToken(ctx context.Context, in *GetObjectTokenReq, opts ...grpc.CallOption) (*GetObjectTokenRes, error) {
	out := new(GetObjectTokenRes)
	err := c.cc.Invoke(ctx, "/share_service.ShareService/GetObjectToken", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ShareServiceServer is the server API for ShareService service.
// All implementations must embed UnimplementedShareServiceServer
// for forward compatibility
type ShareServiceServer interface {
	// user permission rpc methods
	CreateToken(context.Context, *CreateTokenReq) (*CreateTokenRes, error)
	UpdateToken(context.Context, *UpdateTokenReq) (*UpdateTokenRes, error)
	GetObjectToken(context.Context, *GetObjectTokenReq) (*GetObjectTokenRes, error)
	mustEmbedUnimplementedShareServiceServer()
}

// UnimplementedShareServiceServer must be embedded to have forward compatible implementations.
type UnimplementedShareServiceServer struct {
}

func (UnimplementedShareServiceServer) CreateToken(context.Context, *CreateTokenReq) (*CreateTokenRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateToken not implemented")
}
func (UnimplementedShareServiceServer) UpdateToken(context.Context, *UpdateTokenReq) (*UpdateTokenRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateToken not implemented")
}
func (UnimplementedShareServiceServer) GetObjectToken(context.Context, *GetObjectTokenReq) (*GetObjectTokenRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetObjectToken not implemented")
}
func (UnimplementedShareServiceServer) mustEmbedUnimplementedShareServiceServer() {}

// UnsafeShareServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ShareServiceServer will
// result in compilation errors.
type UnsafeShareServiceServer interface {
	mustEmbedUnimplementedShareServiceServer()
}

func RegisterShareServiceServer(s grpc.ServiceRegistrar, srv ShareServiceServer) {
	s.RegisterService(&ShareService_ServiceDesc, srv)
}

func _ShareService_CreateToken_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateTokenReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ShareServiceServer).CreateToken(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/share_service.ShareService/CreateToken",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ShareServiceServer).CreateToken(ctx, req.(*CreateTokenReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _ShareService_UpdateToken_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateTokenReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ShareServiceServer).UpdateToken(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/share_service.ShareService/UpdateToken",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ShareServiceServer).UpdateToken(ctx, req.(*UpdateTokenReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _ShareService_GetObjectToken_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetObjectTokenReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ShareServiceServer).GetObjectToken(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/share_service.ShareService/GetObjectToken",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ShareServiceServer).GetObjectToken(ctx, req.(*GetObjectTokenReq))
	}
	return interceptor(ctx, in, info, handler)
}

// ShareService_ServiceDesc is the grpc.ServiceDesc for ShareService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var ShareService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "share_service.ShareService",
	HandlerType: (*ShareServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateToken",
			Handler:    _ShareService_CreateToken_Handler,
		},
		{
			MethodName: "UpdateToken",
			Handler:    _ShareService_UpdateToken_Handler,
		},
		{
			MethodName: "GetObjectToken",
			Handler:    _ShareService_GetObjectToken_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "share.proto",
}
