// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.17.3
// source: dag.proto

package scenario_service

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// DAGServiceClient is the client API for DAGService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type DAGServiceClient interface {
	Create(ctx context.Context, in *CreateDAGRequest, opts ...grpc.CallOption) (*DAG, error)
	Get(ctx context.Context, in *GetDAGRequest, opts ...grpc.CallOption) (*DAG, error)
	GetAll(ctx context.Context, in *GetAllDAGRequest, opts ...grpc.CallOption) (*DAGList, error)
	Delete(ctx context.Context, in *DeleteDAGRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	Update(ctx context.Context, in *CreateScenarioRequest, opts ...grpc.CallOption) (*DAG, error)
	CreateScenario(ctx context.Context, in *CreateScenarioRequest, opts ...grpc.CallOption) (*DAG, error)
	GetScenarioHistory(ctx context.Context, in *GetScenarioHistoryRequest, opts ...grpc.CallOption) (*GetScenarioHistoryResponse, error)
	SelectManyScenarioVersions(ctx context.Context, in *CommitWithRelease, opts ...grpc.CallOption) (*CommitWithRelease, error)
	RevertScenario(ctx context.Context, in *RevertScenarioRequest, opts ...grpc.CallOption) (*RevertScenarioResponse, error)
}

type dAGServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewDAGServiceClient(cc grpc.ClientConnInterface) DAGServiceClient {
	return &dAGServiceClient{cc}
}

func (c *dAGServiceClient) Create(ctx context.Context, in *CreateDAGRequest, opts ...grpc.CallOption) (*DAG, error) {
	out := new(DAG)
	err := c.cc.Invoke(ctx, "/scenario_service.DAGService/Create", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dAGServiceClient) Get(ctx context.Context, in *GetDAGRequest, opts ...grpc.CallOption) (*DAG, error) {
	out := new(DAG)
	err := c.cc.Invoke(ctx, "/scenario_service.DAGService/Get", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dAGServiceClient) GetAll(ctx context.Context, in *GetAllDAGRequest, opts ...grpc.CallOption) (*DAGList, error) {
	out := new(DAGList)
	err := c.cc.Invoke(ctx, "/scenario_service.DAGService/GetAll", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dAGServiceClient) Delete(ctx context.Context, in *DeleteDAGRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/scenario_service.DAGService/Delete", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dAGServiceClient) Update(ctx context.Context, in *CreateScenarioRequest, opts ...grpc.CallOption) (*DAG, error) {
	out := new(DAG)
	err := c.cc.Invoke(ctx, "/scenario_service.DAGService/Update", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dAGServiceClient) CreateScenario(ctx context.Context, in *CreateScenarioRequest, opts ...grpc.CallOption) (*DAG, error) {
	out := new(DAG)
	err := c.cc.Invoke(ctx, "/scenario_service.DAGService/CreateScenario", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dAGServiceClient) GetScenarioHistory(ctx context.Context, in *GetScenarioHistoryRequest, opts ...grpc.CallOption) (*GetScenarioHistoryResponse, error) {
	out := new(GetScenarioHistoryResponse)
	err := c.cc.Invoke(ctx, "/scenario_service.DAGService/GetScenarioHistory", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dAGServiceClient) SelectManyScenarioVersions(ctx context.Context, in *CommitWithRelease, opts ...grpc.CallOption) (*CommitWithRelease, error) {
	out := new(CommitWithRelease)
	err := c.cc.Invoke(ctx, "/scenario_service.DAGService/SelectManyScenarioVersions", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dAGServiceClient) RevertScenario(ctx context.Context, in *RevertScenarioRequest, opts ...grpc.CallOption) (*RevertScenarioResponse, error) {
	out := new(RevertScenarioResponse)
	err := c.cc.Invoke(ctx, "/scenario_service.DAGService/RevertScenario", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// DAGServiceServer is the server API for DAGService service.
// All implementations must embed UnimplementedDAGServiceServer
// for forward compatibility
type DAGServiceServer interface {
	Create(context.Context, *CreateDAGRequest) (*DAG, error)
	Get(context.Context, *GetDAGRequest) (*DAG, error)
	GetAll(context.Context, *GetAllDAGRequest) (*DAGList, error)
	Delete(context.Context, *DeleteDAGRequest) (*emptypb.Empty, error)
	Update(context.Context, *CreateScenarioRequest) (*DAG, error)
	CreateScenario(context.Context, *CreateScenarioRequest) (*DAG, error)
	GetScenarioHistory(context.Context, *GetScenarioHistoryRequest) (*GetScenarioHistoryResponse, error)
	SelectManyScenarioVersions(context.Context, *CommitWithRelease) (*CommitWithRelease, error)
	RevertScenario(context.Context, *RevertScenarioRequest) (*RevertScenarioResponse, error)
	mustEmbedUnimplementedDAGServiceServer()
}

// UnimplementedDAGServiceServer must be embedded to have forward compatible implementations.
type UnimplementedDAGServiceServer struct {
}

func (UnimplementedDAGServiceServer) Create(context.Context, *CreateDAGRequest) (*DAG, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Create not implemented")
}
func (UnimplementedDAGServiceServer) Get(context.Context, *GetDAGRequest) (*DAG, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Get not implemented")
}
func (UnimplementedDAGServiceServer) GetAll(context.Context, *GetAllDAGRequest) (*DAGList, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAll not implemented")
}
func (UnimplementedDAGServiceServer) Delete(context.Context, *DeleteDAGRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Delete not implemented")
}
func (UnimplementedDAGServiceServer) Update(context.Context, *CreateScenarioRequest) (*DAG, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Update not implemented")
}
func (UnimplementedDAGServiceServer) CreateScenario(context.Context, *CreateScenarioRequest) (*DAG, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateScenario not implemented")
}
func (UnimplementedDAGServiceServer) GetScenarioHistory(context.Context, *GetScenarioHistoryRequest) (*GetScenarioHistoryResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetScenarioHistory not implemented")
}
func (UnimplementedDAGServiceServer) SelectManyScenarioVersions(context.Context, *CommitWithRelease) (*CommitWithRelease, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SelectManyScenarioVersions not implemented")
}
func (UnimplementedDAGServiceServer) RevertScenario(context.Context, *RevertScenarioRequest) (*RevertScenarioResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RevertScenario not implemented")
}
func (UnimplementedDAGServiceServer) mustEmbedUnimplementedDAGServiceServer() {}

// UnsafeDAGServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to DAGServiceServer will
// result in compilation errors.
type UnsafeDAGServiceServer interface {
	mustEmbedUnimplementedDAGServiceServer()
}

func RegisterDAGServiceServer(s grpc.ServiceRegistrar, srv DAGServiceServer) {
	s.RegisterService(&DAGService_ServiceDesc, srv)
}

func _DAGService_Create_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateDAGRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DAGServiceServer).Create(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/scenario_service.DAGService/Create",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DAGServiceServer).Create(ctx, req.(*CreateDAGRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DAGService_Get_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetDAGRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DAGServiceServer).Get(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/scenario_service.DAGService/Get",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DAGServiceServer).Get(ctx, req.(*GetDAGRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DAGService_GetAll_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetAllDAGRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DAGServiceServer).GetAll(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/scenario_service.DAGService/GetAll",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DAGServiceServer).GetAll(ctx, req.(*GetAllDAGRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DAGService_Delete_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteDAGRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DAGServiceServer).Delete(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/scenario_service.DAGService/Delete",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DAGServiceServer).Delete(ctx, req.(*DeleteDAGRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DAGService_Update_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateScenarioRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DAGServiceServer).Update(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/scenario_service.DAGService/Update",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DAGServiceServer).Update(ctx, req.(*CreateScenarioRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DAGService_CreateScenario_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateScenarioRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DAGServiceServer).CreateScenario(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/scenario_service.DAGService/CreateScenario",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DAGServiceServer).CreateScenario(ctx, req.(*CreateScenarioRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DAGService_GetScenarioHistory_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetScenarioHistoryRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DAGServiceServer).GetScenarioHistory(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/scenario_service.DAGService/GetScenarioHistory",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DAGServiceServer).GetScenarioHistory(ctx, req.(*GetScenarioHistoryRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DAGService_SelectManyScenarioVersions_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CommitWithRelease)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DAGServiceServer).SelectManyScenarioVersions(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/scenario_service.DAGService/SelectManyScenarioVersions",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DAGServiceServer).SelectManyScenarioVersions(ctx, req.(*CommitWithRelease))
	}
	return interceptor(ctx, in, info, handler)
}

func _DAGService_RevertScenario_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RevertScenarioRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DAGServiceServer).RevertScenario(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/scenario_service.DAGService/RevertScenario",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DAGServiceServer).RevertScenario(ctx, req.(*RevertScenarioRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// DAGService_ServiceDesc is the grpc.ServiceDesc for DAGService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var DAGService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "scenario_service.DAGService",
	HandlerType: (*DAGServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Create",
			Handler:    _DAGService_Create_Handler,
		},
		{
			MethodName: "Get",
			Handler:    _DAGService_Get_Handler,
		},
		{
			MethodName: "GetAll",
			Handler:    _DAGService_GetAll_Handler,
		},
		{
			MethodName: "Delete",
			Handler:    _DAGService_Delete_Handler,
		},
		{
			MethodName: "Update",
			Handler:    _DAGService_Update_Handler,
		},
		{
			MethodName: "CreateScenario",
			Handler:    _DAGService_CreateScenario_Handler,
		},
		{
			MethodName: "GetScenarioHistory",
			Handler:    _DAGService_GetScenarioHistory_Handler,
		},
		{
			MethodName: "SelectManyScenarioVersions",
			Handler:    _DAGService_SelectManyScenarioVersions_Handler,
		},
		{
			MethodName: "RevertScenario",
			Handler:    _DAGService_RevertScenario_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "dag.proto",
}
