// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.17.3
// source: dag_step.proto

package scenario_service

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// DAGStepServiceClient is the client API for DAGStepService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type DAGStepServiceClient interface {
	Create(ctx context.Context, in *CreateDAGStepRequest, opts ...grpc.CallOption) (*DAGStep, error)
	Get(ctx context.Context, in *GetDAGStepRequest, opts ...grpc.CallOption) (*DAGStep, error)
	GetAll(ctx context.Context, in *GetAllDAGStepRequest, opts ...grpc.CallOption) (*DAGStepList, error)
	Delete(ctx context.Context, in *DeleteDAGStepRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	Update(ctx context.Context, in *UpdateDAGStepRequest, opts ...grpc.CallOption) (*DAGStep, error)
	DagStepRun(ctx context.Context, in *DAGStepRunRequest, opts ...grpc.CallOption) (*DAGStepRunResponse, error)
	GetAllDagStepsWithDAG(ctx context.Context, in *GetAllDAGStepRequest, opts ...grpc.CallOption) (*DAGStepList, error)
}

type dAGStepServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewDAGStepServiceClient(cc grpc.ClientConnInterface) DAGStepServiceClient {
	return &dAGStepServiceClient{cc}
}

func (c *dAGStepServiceClient) Create(ctx context.Context, in *CreateDAGStepRequest, opts ...grpc.CallOption) (*DAGStep, error) {
	out := new(DAGStep)
	err := c.cc.Invoke(ctx, "/scenario_service.DAGStepService/Create", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dAGStepServiceClient) Get(ctx context.Context, in *GetDAGStepRequest, opts ...grpc.CallOption) (*DAGStep, error) {
	out := new(DAGStep)
	err := c.cc.Invoke(ctx, "/scenario_service.DAGStepService/Get", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dAGStepServiceClient) GetAll(ctx context.Context, in *GetAllDAGStepRequest, opts ...grpc.CallOption) (*DAGStepList, error) {
	out := new(DAGStepList)
	err := c.cc.Invoke(ctx, "/scenario_service.DAGStepService/GetAll", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dAGStepServiceClient) Delete(ctx context.Context, in *DeleteDAGStepRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/scenario_service.DAGStepService/Delete", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dAGStepServiceClient) Update(ctx context.Context, in *UpdateDAGStepRequest, opts ...grpc.CallOption) (*DAGStep, error) {
	out := new(DAGStep)
	err := c.cc.Invoke(ctx, "/scenario_service.DAGStepService/Update", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dAGStepServiceClient) DagStepRun(ctx context.Context, in *DAGStepRunRequest, opts ...grpc.CallOption) (*DAGStepRunResponse, error) {
	out := new(DAGStepRunResponse)
	err := c.cc.Invoke(ctx, "/scenario_service.DAGStepService/DagStepRun", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dAGStepServiceClient) GetAllDagStepsWithDAG(ctx context.Context, in *GetAllDAGStepRequest, opts ...grpc.CallOption) (*DAGStepList, error) {
	out := new(DAGStepList)
	err := c.cc.Invoke(ctx, "/scenario_service.DAGStepService/GetAllDagStepsWithDAG", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// DAGStepServiceServer is the server API for DAGStepService service.
// All implementations must embed UnimplementedDAGStepServiceServer
// for forward compatibility
type DAGStepServiceServer interface {
	Create(context.Context, *CreateDAGStepRequest) (*DAGStep, error)
	Get(context.Context, *GetDAGStepRequest) (*DAGStep, error)
	GetAll(context.Context, *GetAllDAGStepRequest) (*DAGStepList, error)
	Delete(context.Context, *DeleteDAGStepRequest) (*emptypb.Empty, error)
	Update(context.Context, *UpdateDAGStepRequest) (*DAGStep, error)
	DagStepRun(context.Context, *DAGStepRunRequest) (*DAGStepRunResponse, error)
	GetAllDagStepsWithDAG(context.Context, *GetAllDAGStepRequest) (*DAGStepList, error)
	mustEmbedUnimplementedDAGStepServiceServer()
}

// UnimplementedDAGStepServiceServer must be embedded to have forward compatible implementations.
type UnimplementedDAGStepServiceServer struct {
}

func (UnimplementedDAGStepServiceServer) Create(context.Context, *CreateDAGStepRequest) (*DAGStep, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Create not implemented")
}
func (UnimplementedDAGStepServiceServer) Get(context.Context, *GetDAGStepRequest) (*DAGStep, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Get not implemented")
}
func (UnimplementedDAGStepServiceServer) GetAll(context.Context, *GetAllDAGStepRequest) (*DAGStepList, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAll not implemented")
}
func (UnimplementedDAGStepServiceServer) Delete(context.Context, *DeleteDAGStepRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Delete not implemented")
}
func (UnimplementedDAGStepServiceServer) Update(context.Context, *UpdateDAGStepRequest) (*DAGStep, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Update not implemented")
}
func (UnimplementedDAGStepServiceServer) DagStepRun(context.Context, *DAGStepRunRequest) (*DAGStepRunResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DagStepRun not implemented")
}
func (UnimplementedDAGStepServiceServer) GetAllDagStepsWithDAG(context.Context, *GetAllDAGStepRequest) (*DAGStepList, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAllDagStepsWithDAG not implemented")
}
func (UnimplementedDAGStepServiceServer) mustEmbedUnimplementedDAGStepServiceServer() {}

// UnsafeDAGStepServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to DAGStepServiceServer will
// result in compilation errors.
type UnsafeDAGStepServiceServer interface {
	mustEmbedUnimplementedDAGStepServiceServer()
}

func RegisterDAGStepServiceServer(s grpc.ServiceRegistrar, srv DAGStepServiceServer) {
	s.RegisterService(&DAGStepService_ServiceDesc, srv)
}

func _DAGStepService_Create_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateDAGStepRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DAGStepServiceServer).Create(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/scenario_service.DAGStepService/Create",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DAGStepServiceServer).Create(ctx, req.(*CreateDAGStepRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DAGStepService_Get_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetDAGStepRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DAGStepServiceServer).Get(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/scenario_service.DAGStepService/Get",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DAGStepServiceServer).Get(ctx, req.(*GetDAGStepRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DAGStepService_GetAll_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetAllDAGStepRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DAGStepServiceServer).GetAll(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/scenario_service.DAGStepService/GetAll",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DAGStepServiceServer).GetAll(ctx, req.(*GetAllDAGStepRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DAGStepService_Delete_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteDAGStepRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DAGStepServiceServer).Delete(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/scenario_service.DAGStepService/Delete",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DAGStepServiceServer).Delete(ctx, req.(*DeleteDAGStepRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DAGStepService_Update_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateDAGStepRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DAGStepServiceServer).Update(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/scenario_service.DAGStepService/Update",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DAGStepServiceServer).Update(ctx, req.(*UpdateDAGStepRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DAGStepService_DagStepRun_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DAGStepRunRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DAGStepServiceServer).DagStepRun(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/scenario_service.DAGStepService/DagStepRun",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DAGStepServiceServer).DagStepRun(ctx, req.(*DAGStepRunRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DAGStepService_GetAllDagStepsWithDAG_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetAllDAGStepRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DAGStepServiceServer).GetAllDagStepsWithDAG(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/scenario_service.DAGStepService/GetAllDagStepsWithDAG",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DAGStepServiceServer).GetAllDagStepsWithDAG(ctx, req.(*GetAllDAGStepRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// DAGStepService_ServiceDesc is the grpc.ServiceDesc for DAGStepService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var DAGStepService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "scenario_service.DAGStepService",
	HandlerType: (*DAGStepServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Create",
			Handler:    _DAGStepService_Create_Handler,
		},
		{
			MethodName: "Get",
			Handler:    _DAGStepService_Get_Handler,
		},
		{
			MethodName: "GetAll",
			Handler:    _DAGStepService_GetAll_Handler,
		},
		{
			MethodName: "Delete",
			Handler:    _DAGStepService_Delete_Handler,
		},
		{
			MethodName: "Update",
			Handler:    _DAGStepService_Update_Handler,
		},
		{
			MethodName: "DagStepRun",
			Handler:    _DAGStepService_DagStepRun_Handler,
		},
		{
			MethodName: "GetAllDagStepsWithDAG",
			Handler:    _DAGStepService_GetAllDagStepsWithDAG_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "dag_step.proto",
}
