// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.17.3
// source: setting.proto

package object_builder_service

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// SettingServiceClient is the client API for SettingService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type SettingServiceClient interface {
	GetDefaultSettings(ctx context.Context, in *GetDefaultSettingsReq, opts ...grpc.CallOption) (*GetDefaultSettingsRes, error)
	GetAll(ctx context.Context, in *GetAllReq, opts ...grpc.CallOption) (*Setting, error)
	SetDefaultSettings(ctx context.Context, in *SetDefaultSettingsReq, opts ...grpc.CallOption) (*Setting, error)
}

type settingServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewSettingServiceClient(cc grpc.ClientConnInterface) SettingServiceClient {
	return &settingServiceClient{cc}
}

func (c *settingServiceClient) GetDefaultSettings(ctx context.Context, in *GetDefaultSettingsReq, opts ...grpc.CallOption) (*GetDefaultSettingsRes, error) {
	out := new(GetDefaultSettingsRes)
	err := c.cc.Invoke(ctx, "/object_builder_service.SettingService/GetDefaultSettings", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *settingServiceClient) GetAll(ctx context.Context, in *GetAllReq, opts ...grpc.CallOption) (*Setting, error) {
	out := new(Setting)
	err := c.cc.Invoke(ctx, "/object_builder_service.SettingService/GetAll", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *settingServiceClient) SetDefaultSettings(ctx context.Context, in *SetDefaultSettingsReq, opts ...grpc.CallOption) (*Setting, error) {
	out := new(Setting)
	err := c.cc.Invoke(ctx, "/object_builder_service.SettingService/SetDefaultSettings", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// SettingServiceServer is the server API for SettingService service.
// All implementations must embed UnimplementedSettingServiceServer
// for forward compatibility
type SettingServiceServer interface {
	GetDefaultSettings(context.Context, *GetDefaultSettingsReq) (*GetDefaultSettingsRes, error)
	GetAll(context.Context, *GetAllReq) (*Setting, error)
	SetDefaultSettings(context.Context, *SetDefaultSettingsReq) (*Setting, error)
	mustEmbedUnimplementedSettingServiceServer()
}

// UnimplementedSettingServiceServer must be embedded to have forward compatible implementations.
type UnimplementedSettingServiceServer struct {
}

func (UnimplementedSettingServiceServer) GetDefaultSettings(context.Context, *GetDefaultSettingsReq) (*GetDefaultSettingsRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetDefaultSettings not implemented")
}
func (UnimplementedSettingServiceServer) GetAll(context.Context, *GetAllReq) (*Setting, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAll not implemented")
}
func (UnimplementedSettingServiceServer) SetDefaultSettings(context.Context, *SetDefaultSettingsReq) (*Setting, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetDefaultSettings not implemented")
}
func (UnimplementedSettingServiceServer) mustEmbedUnimplementedSettingServiceServer() {}

// UnsafeSettingServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to SettingServiceServer will
// result in compilation errors.
type UnsafeSettingServiceServer interface {
	mustEmbedUnimplementedSettingServiceServer()
}

func RegisterSettingServiceServer(s grpc.ServiceRegistrar, srv SettingServiceServer) {
	s.RegisterService(&SettingService_ServiceDesc, srv)
}

func _SettingService_GetDefaultSettings_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetDefaultSettingsReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SettingServiceServer).GetDefaultSettings(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/object_builder_service.SettingService/GetDefaultSettings",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SettingServiceServer).GetDefaultSettings(ctx, req.(*GetDefaultSettingsReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _SettingService_GetAll_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetAllReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SettingServiceServer).GetAll(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/object_builder_service.SettingService/GetAll",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SettingServiceServer).GetAll(ctx, req.(*GetAllReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _SettingService_SetDefaultSettings_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SetDefaultSettingsReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SettingServiceServer).SetDefaultSettings(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/object_builder_service.SettingService/SetDefaultSettings",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SettingServiceServer).SetDefaultSettings(ctx, req.(*SetDefaultSettingsReq))
	}
	return interceptor(ctx, in, info, handler)
}

// SettingService_ServiceDesc is the grpc.ServiceDesc for SettingService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var SettingService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "object_builder_service.SettingService",
	HandlerType: (*SettingServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetDefaultSettings",
			Handler:    _SettingService_GetDefaultSettings_Handler,
		},
		{
			MethodName: "GetAll",
			Handler:    _SettingService_GetAll_Handler,
		},
		{
			MethodName: "SetDefaultSettings",
			Handler:    _SettingService_SetDefaultSettings_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "setting.proto",
}
