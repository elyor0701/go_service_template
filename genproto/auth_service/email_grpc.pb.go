// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.17.3
// source: email.proto

package auth_service

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// EmailOtpServiceClient is the client API for EmailOtpService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type EmailOtpServiceClient interface {
	Create(ctx context.Context, in *Email, opts ...grpc.CallOption) (*Email, error)
	GetEmailByID(ctx context.Context, in *EmailOtpPrimaryKey, opts ...grpc.CallOption) (*Email, error)
	CreateEmailSettings(ctx context.Context, in *EmailSettings, opts ...grpc.CallOption) (*EmailSettings, error)
	UpdateEmailSettings(ctx context.Context, in *UpdateEmailSettingsRequest, opts ...grpc.CallOption) (*EmailSettings, error)
	GetListEmailSettings(ctx context.Context, in *GetListEmailSettingsRequest, opts ...grpc.CallOption) (*UpdateEmailSettingsResponse, error)
	DeleteEmailSettings(ctx context.Context, in *EmailSettingsPrimaryKey, opts ...grpc.CallOption) (*emptypb.Empty, error)
}

type emailOtpServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewEmailOtpServiceClient(cc grpc.ClientConnInterface) EmailOtpServiceClient {
	return &emailOtpServiceClient{cc}
}

func (c *emailOtpServiceClient) Create(ctx context.Context, in *Email, opts ...grpc.CallOption) (*Email, error) {
	out := new(Email)
	err := c.cc.Invoke(ctx, "/auth_service.EmailOtpService/Create", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *emailOtpServiceClient) GetEmailByID(ctx context.Context, in *EmailOtpPrimaryKey, opts ...grpc.CallOption) (*Email, error) {
	out := new(Email)
	err := c.cc.Invoke(ctx, "/auth_service.EmailOtpService/GetEmailByID", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *emailOtpServiceClient) CreateEmailSettings(ctx context.Context, in *EmailSettings, opts ...grpc.CallOption) (*EmailSettings, error) {
	out := new(EmailSettings)
	err := c.cc.Invoke(ctx, "/auth_service.EmailOtpService/CreateEmailSettings", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *emailOtpServiceClient) UpdateEmailSettings(ctx context.Context, in *UpdateEmailSettingsRequest, opts ...grpc.CallOption) (*EmailSettings, error) {
	out := new(EmailSettings)
	err := c.cc.Invoke(ctx, "/auth_service.EmailOtpService/UpdateEmailSettings", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *emailOtpServiceClient) GetListEmailSettings(ctx context.Context, in *GetListEmailSettingsRequest, opts ...grpc.CallOption) (*UpdateEmailSettingsResponse, error) {
	out := new(UpdateEmailSettingsResponse)
	err := c.cc.Invoke(ctx, "/auth_service.EmailOtpService/GetListEmailSettings", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *emailOtpServiceClient) DeleteEmailSettings(ctx context.Context, in *EmailSettingsPrimaryKey, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/auth_service.EmailOtpService/DeleteEmailSettings", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// EmailOtpServiceServer is the server API for EmailOtpService service.
// All implementations must embed UnimplementedEmailOtpServiceServer
// for forward compatibility
type EmailOtpServiceServer interface {
	Create(context.Context, *Email) (*Email, error)
	GetEmailByID(context.Context, *EmailOtpPrimaryKey) (*Email, error)
	CreateEmailSettings(context.Context, *EmailSettings) (*EmailSettings, error)
	UpdateEmailSettings(context.Context, *UpdateEmailSettingsRequest) (*EmailSettings, error)
	GetListEmailSettings(context.Context, *GetListEmailSettingsRequest) (*UpdateEmailSettingsResponse, error)
	DeleteEmailSettings(context.Context, *EmailSettingsPrimaryKey) (*emptypb.Empty, error)
	mustEmbedUnimplementedEmailOtpServiceServer()
}

// UnimplementedEmailOtpServiceServer must be embedded to have forward compatible implementations.
type UnimplementedEmailOtpServiceServer struct {
}

func (UnimplementedEmailOtpServiceServer) Create(context.Context, *Email) (*Email, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Create not implemented")
}
func (UnimplementedEmailOtpServiceServer) GetEmailByID(context.Context, *EmailOtpPrimaryKey) (*Email, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetEmailByID not implemented")
}
func (UnimplementedEmailOtpServiceServer) CreateEmailSettings(context.Context, *EmailSettings) (*EmailSettings, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateEmailSettings not implemented")
}
func (UnimplementedEmailOtpServiceServer) UpdateEmailSettings(context.Context, *UpdateEmailSettingsRequest) (*EmailSettings, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateEmailSettings not implemented")
}
func (UnimplementedEmailOtpServiceServer) GetListEmailSettings(context.Context, *GetListEmailSettingsRequest) (*UpdateEmailSettingsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetListEmailSettings not implemented")
}
func (UnimplementedEmailOtpServiceServer) DeleteEmailSettings(context.Context, *EmailSettingsPrimaryKey) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteEmailSettings not implemented")
}
func (UnimplementedEmailOtpServiceServer) mustEmbedUnimplementedEmailOtpServiceServer() {}

// UnsafeEmailOtpServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to EmailOtpServiceServer will
// result in compilation errors.
type UnsafeEmailOtpServiceServer interface {
	mustEmbedUnimplementedEmailOtpServiceServer()
}

func RegisterEmailOtpServiceServer(s grpc.ServiceRegistrar, srv EmailOtpServiceServer) {
	s.RegisterService(&EmailOtpService_ServiceDesc, srv)
}

func _EmailOtpService_Create_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Email)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EmailOtpServiceServer).Create(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/auth_service.EmailOtpService/Create",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EmailOtpServiceServer).Create(ctx, req.(*Email))
	}
	return interceptor(ctx, in, info, handler)
}

func _EmailOtpService_GetEmailByID_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EmailOtpPrimaryKey)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EmailOtpServiceServer).GetEmailByID(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/auth_service.EmailOtpService/GetEmailByID",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EmailOtpServiceServer).GetEmailByID(ctx, req.(*EmailOtpPrimaryKey))
	}
	return interceptor(ctx, in, info, handler)
}

func _EmailOtpService_CreateEmailSettings_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EmailSettings)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EmailOtpServiceServer).CreateEmailSettings(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/auth_service.EmailOtpService/CreateEmailSettings",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EmailOtpServiceServer).CreateEmailSettings(ctx, req.(*EmailSettings))
	}
	return interceptor(ctx, in, info, handler)
}

func _EmailOtpService_UpdateEmailSettings_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateEmailSettingsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EmailOtpServiceServer).UpdateEmailSettings(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/auth_service.EmailOtpService/UpdateEmailSettings",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EmailOtpServiceServer).UpdateEmailSettings(ctx, req.(*UpdateEmailSettingsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _EmailOtpService_GetListEmailSettings_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetListEmailSettingsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EmailOtpServiceServer).GetListEmailSettings(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/auth_service.EmailOtpService/GetListEmailSettings",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EmailOtpServiceServer).GetListEmailSettings(ctx, req.(*GetListEmailSettingsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _EmailOtpService_DeleteEmailSettings_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EmailSettingsPrimaryKey)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EmailOtpServiceServer).DeleteEmailSettings(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/auth_service.EmailOtpService/DeleteEmailSettings",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EmailOtpServiceServer).DeleteEmailSettings(ctx, req.(*EmailSettingsPrimaryKey))
	}
	return interceptor(ctx, in, info, handler)
}

// EmailOtpService_ServiceDesc is the grpc.ServiceDesc for EmailOtpService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var EmailOtpService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "auth_service.EmailOtpService",
	HandlerType: (*EmailOtpServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Create",
			Handler:    _EmailOtpService_Create_Handler,
		},
		{
			MethodName: "GetEmailByID",
			Handler:    _EmailOtpService_GetEmailByID_Handler,
		},
		{
			MethodName: "CreateEmailSettings",
			Handler:    _EmailOtpService_CreateEmailSettings_Handler,
		},
		{
			MethodName: "UpdateEmailSettings",
			Handler:    _EmailOtpService_UpdateEmailSettings_Handler,
		},
		{
			MethodName: "GetListEmailSettings",
			Handler:    _EmailOtpService_GetListEmailSettings_Handler,
		},
		{
			MethodName: "DeleteEmailSettings",
			Handler:    _EmailOtpService_DeleteEmailSettings_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "email.proto",
}
