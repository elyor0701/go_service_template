// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.17.3
// source: query_request.proto

package query_service

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// QueryServiceClient is the client API for QueryService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type QueryServiceClient interface {
	CreateQuery(ctx context.Context, in *CreateQueryReq, opts ...grpc.CallOption) (*Query, error)
	GetListQuery(ctx context.Context, in *GetListQueryReq, opts ...grpc.CallOption) (*GetListQueryRes, error)
	GetSingleQuery(ctx context.Context, in *GetSingleQueryReq, opts ...grpc.CallOption) (*Query, error)
	UpdateQuery(ctx context.Context, in *UpdateQueryReq, opts ...grpc.CallOption) (*Query, error)
	DeleteQuery(ctx context.Context, in *DeleteQueryReq, opts ...grpc.CallOption) (*emptypb.Empty, error)
	GetQueryHistory(ctx context.Context, in *GetQueryHistoryReq, opts ...grpc.CallOption) (*GetQueryHistoryRes, error)
	RevertQuery(ctx context.Context, in *RevertQueryReq, opts ...grpc.CallOption) (*Query, error)
	CreateManyQuery(ctx context.Context, in *ManyVersions, opts ...grpc.CallOption) (*emptypb.Empty, error)
	RunQuery(ctx context.Context, in *Query, opts ...grpc.CallOption) (*RunQueryRes, error)
}

type queryServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewQueryServiceClient(cc grpc.ClientConnInterface) QueryServiceClient {
	return &queryServiceClient{cc}
}

func (c *queryServiceClient) CreateQuery(ctx context.Context, in *CreateQueryReq, opts ...grpc.CallOption) (*Query, error) {
	out := new(Query)
	err := c.cc.Invoke(ctx, "/query_service.QueryService/CreateQuery", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryServiceClient) GetListQuery(ctx context.Context, in *GetListQueryReq, opts ...grpc.CallOption) (*GetListQueryRes, error) {
	out := new(GetListQueryRes)
	err := c.cc.Invoke(ctx, "/query_service.QueryService/GetListQuery", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryServiceClient) GetSingleQuery(ctx context.Context, in *GetSingleQueryReq, opts ...grpc.CallOption) (*Query, error) {
	out := new(Query)
	err := c.cc.Invoke(ctx, "/query_service.QueryService/GetSingleQuery", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryServiceClient) UpdateQuery(ctx context.Context, in *UpdateQueryReq, opts ...grpc.CallOption) (*Query, error) {
	out := new(Query)
	err := c.cc.Invoke(ctx, "/query_service.QueryService/UpdateQuery", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryServiceClient) DeleteQuery(ctx context.Context, in *DeleteQueryReq, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/query_service.QueryService/DeleteQuery", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryServiceClient) GetQueryHistory(ctx context.Context, in *GetQueryHistoryReq, opts ...grpc.CallOption) (*GetQueryHistoryRes, error) {
	out := new(GetQueryHistoryRes)
	err := c.cc.Invoke(ctx, "/query_service.QueryService/GetQueryHistory", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryServiceClient) RevertQuery(ctx context.Context, in *RevertQueryReq, opts ...grpc.CallOption) (*Query, error) {
	out := new(Query)
	err := c.cc.Invoke(ctx, "/query_service.QueryService/RevertQuery", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryServiceClient) CreateManyQuery(ctx context.Context, in *ManyVersions, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/query_service.QueryService/CreateManyQuery", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryServiceClient) RunQuery(ctx context.Context, in *Query, opts ...grpc.CallOption) (*RunQueryRes, error) {
	out := new(RunQueryRes)
	err := c.cc.Invoke(ctx, "/query_service.QueryService/RunQuery", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// QueryServiceServer is the server API for QueryService service.
// All implementations must embed UnimplementedQueryServiceServer
// for forward compatibility
type QueryServiceServer interface {
	CreateQuery(context.Context, *CreateQueryReq) (*Query, error)
	GetListQuery(context.Context, *GetListQueryReq) (*GetListQueryRes, error)
	GetSingleQuery(context.Context, *GetSingleQueryReq) (*Query, error)
	UpdateQuery(context.Context, *UpdateQueryReq) (*Query, error)
	DeleteQuery(context.Context, *DeleteQueryReq) (*emptypb.Empty, error)
	GetQueryHistory(context.Context, *GetQueryHistoryReq) (*GetQueryHistoryRes, error)
	RevertQuery(context.Context, *RevertQueryReq) (*Query, error)
	CreateManyQuery(context.Context, *ManyVersions) (*emptypb.Empty, error)
	RunQuery(context.Context, *Query) (*RunQueryRes, error)
	mustEmbedUnimplementedQueryServiceServer()
}

// UnimplementedQueryServiceServer must be embedded to have forward compatible implementations.
type UnimplementedQueryServiceServer struct {
}

func (UnimplementedQueryServiceServer) CreateQuery(context.Context, *CreateQueryReq) (*Query, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateQuery not implemented")
}
func (UnimplementedQueryServiceServer) GetListQuery(context.Context, *GetListQueryReq) (*GetListQueryRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetListQuery not implemented")
}
func (UnimplementedQueryServiceServer) GetSingleQuery(context.Context, *GetSingleQueryReq) (*Query, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetSingleQuery not implemented")
}
func (UnimplementedQueryServiceServer) UpdateQuery(context.Context, *UpdateQueryReq) (*Query, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateQuery not implemented")
}
func (UnimplementedQueryServiceServer) DeleteQuery(context.Context, *DeleteQueryReq) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteQuery not implemented")
}
func (UnimplementedQueryServiceServer) GetQueryHistory(context.Context, *GetQueryHistoryReq) (*GetQueryHistoryRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetQueryHistory not implemented")
}
func (UnimplementedQueryServiceServer) RevertQuery(context.Context, *RevertQueryReq) (*Query, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RevertQuery not implemented")
}
func (UnimplementedQueryServiceServer) CreateManyQuery(context.Context, *ManyVersions) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateManyQuery not implemented")
}
func (UnimplementedQueryServiceServer) RunQuery(context.Context, *Query) (*RunQueryRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RunQuery not implemented")
}
func (UnimplementedQueryServiceServer) mustEmbedUnimplementedQueryServiceServer() {}

// UnsafeQueryServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to QueryServiceServer will
// result in compilation errors.
type UnsafeQueryServiceServer interface {
	mustEmbedUnimplementedQueryServiceServer()
}

func RegisterQueryServiceServer(s grpc.ServiceRegistrar, srv QueryServiceServer) {
	s.RegisterService(&QueryService_ServiceDesc, srv)
}

func _QueryService_CreateQuery_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateQueryReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServiceServer).CreateQuery(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/query_service.QueryService/CreateQuery",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServiceServer).CreateQuery(ctx, req.(*CreateQueryReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _QueryService_GetListQuery_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetListQueryReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServiceServer).GetListQuery(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/query_service.QueryService/GetListQuery",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServiceServer).GetListQuery(ctx, req.(*GetListQueryReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _QueryService_GetSingleQuery_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetSingleQueryReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServiceServer).GetSingleQuery(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/query_service.QueryService/GetSingleQuery",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServiceServer).GetSingleQuery(ctx, req.(*GetSingleQueryReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _QueryService_UpdateQuery_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateQueryReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServiceServer).UpdateQuery(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/query_service.QueryService/UpdateQuery",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServiceServer).UpdateQuery(ctx, req.(*UpdateQueryReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _QueryService_DeleteQuery_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteQueryReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServiceServer).DeleteQuery(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/query_service.QueryService/DeleteQuery",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServiceServer).DeleteQuery(ctx, req.(*DeleteQueryReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _QueryService_GetQueryHistory_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetQueryHistoryReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServiceServer).GetQueryHistory(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/query_service.QueryService/GetQueryHistory",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServiceServer).GetQueryHistory(ctx, req.(*GetQueryHistoryReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _QueryService_RevertQuery_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RevertQueryReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServiceServer).RevertQuery(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/query_service.QueryService/RevertQuery",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServiceServer).RevertQuery(ctx, req.(*RevertQueryReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _QueryService_CreateManyQuery_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ManyVersions)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServiceServer).CreateManyQuery(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/query_service.QueryService/CreateManyQuery",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServiceServer).CreateManyQuery(ctx, req.(*ManyVersions))
	}
	return interceptor(ctx, in, info, handler)
}

func _QueryService_RunQuery_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Query)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServiceServer).RunQuery(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/query_service.QueryService/RunQuery",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServiceServer).RunQuery(ctx, req.(*Query))
	}
	return interceptor(ctx, in, info, handler)
}

// QueryService_ServiceDesc is the grpc.ServiceDesc for QueryService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var QueryService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "query_service.QueryService",
	HandlerType: (*QueryServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateQuery",
			Handler:    _QueryService_CreateQuery_Handler,
		},
		{
			MethodName: "GetListQuery",
			Handler:    _QueryService_GetListQuery_Handler,
		},
		{
			MethodName: "GetSingleQuery",
			Handler:    _QueryService_GetSingleQuery_Handler,
		},
		{
			MethodName: "UpdateQuery",
			Handler:    _QueryService_UpdateQuery_Handler,
		},
		{
			MethodName: "DeleteQuery",
			Handler:    _QueryService_DeleteQuery_Handler,
		},
		{
			MethodName: "GetQueryHistory",
			Handler:    _QueryService_GetQueryHistory_Handler,
		},
		{
			MethodName: "RevertQuery",
			Handler:    _QueryService_RevertQuery_Handler,
		},
		{
			MethodName: "CreateManyQuery",
			Handler:    _QueryService_CreateManyQuery_Handler,
		},
		{
			MethodName: "RunQuery",
			Handler:    _QueryService_RunQuery_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "query_request.proto",
}
