// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.17.3
// source: web_pages.proto

package object_builder_service

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// WebPageServiceClient is the client API for WebPageService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type WebPageServiceClient interface {
	Create(ctx context.Context, in *CreateWebPageRequest, opts ...grpc.CallOption) (*WebPage, error)
	GetById(ctx context.Context, in *WebPageId, opts ...grpc.CallOption) (*WebPage, error)
	GetAll(ctx context.Context, in *GetAllWebPagesRequest, opts ...grpc.CallOption) (*GetAllWebPagesResponse, error)
	Update(ctx context.Context, in *WebPage, opts ...grpc.CallOption) (*emptypb.Empty, error)
	Delete(ctx context.Context, in *WebPageId, opts ...grpc.CallOption) (*emptypb.Empty, error)
}

type webPageServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewWebPageServiceClient(cc grpc.ClientConnInterface) WebPageServiceClient {
	return &webPageServiceClient{cc}
}

func (c *webPageServiceClient) Create(ctx context.Context, in *CreateWebPageRequest, opts ...grpc.CallOption) (*WebPage, error) {
	out := new(WebPage)
	err := c.cc.Invoke(ctx, "/object_builder_service.WebPageService/Create", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *webPageServiceClient) GetById(ctx context.Context, in *WebPageId, opts ...grpc.CallOption) (*WebPage, error) {
	out := new(WebPage)
	err := c.cc.Invoke(ctx, "/object_builder_service.WebPageService/GetById", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *webPageServiceClient) GetAll(ctx context.Context, in *GetAllWebPagesRequest, opts ...grpc.CallOption) (*GetAllWebPagesResponse, error) {
	out := new(GetAllWebPagesResponse)
	err := c.cc.Invoke(ctx, "/object_builder_service.WebPageService/GetAll", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *webPageServiceClient) Update(ctx context.Context, in *WebPage, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/object_builder_service.WebPageService/Update", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *webPageServiceClient) Delete(ctx context.Context, in *WebPageId, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/object_builder_service.WebPageService/Delete", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// WebPageServiceServer is the server API for WebPageService service.
// All implementations must embed UnimplementedWebPageServiceServer
// for forward compatibility
type WebPageServiceServer interface {
	Create(context.Context, *CreateWebPageRequest) (*WebPage, error)
	GetById(context.Context, *WebPageId) (*WebPage, error)
	GetAll(context.Context, *GetAllWebPagesRequest) (*GetAllWebPagesResponse, error)
	Update(context.Context, *WebPage) (*emptypb.Empty, error)
	Delete(context.Context, *WebPageId) (*emptypb.Empty, error)
	mustEmbedUnimplementedWebPageServiceServer()
}

// UnimplementedWebPageServiceServer must be embedded to have forward compatible implementations.
type UnimplementedWebPageServiceServer struct {
}

func (UnimplementedWebPageServiceServer) Create(context.Context, *CreateWebPageRequest) (*WebPage, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Create not implemented")
}
func (UnimplementedWebPageServiceServer) GetById(context.Context, *WebPageId) (*WebPage, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetById not implemented")
}
func (UnimplementedWebPageServiceServer) GetAll(context.Context, *GetAllWebPagesRequest) (*GetAllWebPagesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAll not implemented")
}
func (UnimplementedWebPageServiceServer) Update(context.Context, *WebPage) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Update not implemented")
}
func (UnimplementedWebPageServiceServer) Delete(context.Context, *WebPageId) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Delete not implemented")
}
func (UnimplementedWebPageServiceServer) mustEmbedUnimplementedWebPageServiceServer() {}

// UnsafeWebPageServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to WebPageServiceServer will
// result in compilation errors.
type UnsafeWebPageServiceServer interface {
	mustEmbedUnimplementedWebPageServiceServer()
}

func RegisterWebPageServiceServer(s grpc.ServiceRegistrar, srv WebPageServiceServer) {
	s.RegisterService(&WebPageService_ServiceDesc, srv)
}

func _WebPageService_Create_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateWebPageRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WebPageServiceServer).Create(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/object_builder_service.WebPageService/Create",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WebPageServiceServer).Create(ctx, req.(*CreateWebPageRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _WebPageService_GetById_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(WebPageId)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WebPageServiceServer).GetById(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/object_builder_service.WebPageService/GetById",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WebPageServiceServer).GetById(ctx, req.(*WebPageId))
	}
	return interceptor(ctx, in, info, handler)
}

func _WebPageService_GetAll_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetAllWebPagesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WebPageServiceServer).GetAll(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/object_builder_service.WebPageService/GetAll",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WebPageServiceServer).GetAll(ctx, req.(*GetAllWebPagesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _WebPageService_Update_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(WebPage)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WebPageServiceServer).Update(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/object_builder_service.WebPageService/Update",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WebPageServiceServer).Update(ctx, req.(*WebPage))
	}
	return interceptor(ctx, in, info, handler)
}

func _WebPageService_Delete_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(WebPageId)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WebPageServiceServer).Delete(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/object_builder_service.WebPageService/Delete",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WebPageServiceServer).Delete(ctx, req.(*WebPageId))
	}
	return interceptor(ctx, in, info, handler)
}

// WebPageService_ServiceDesc is the grpc.ServiceDesc for WebPageService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var WebPageService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "object_builder_service.WebPageService",
	HandlerType: (*WebPageServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Create",
			Handler:    _WebPageService_Create_Handler,
		},
		{
			MethodName: "GetById",
			Handler:    _WebPageService_GetById_Handler,
		},
		{
			MethodName: "GetAll",
			Handler:    _WebPageService_GetAll_Handler,
		},
		{
			MethodName: "Update",
			Handler:    _WebPageService_Update_Handler,
		},
		{
			MethodName: "Delete",
			Handler:    _WebPageService_Delete_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "web_pages.proto",
}
