// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.17.3
// source: payze.proto

package integration_service_v2

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// PayzeServiceClient is the client API for PayzeService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type PayzeServiceClient interface {
	GeneratePayzeLink(ctx context.Context, in *PayzeLinkRequest, opts ...grpc.CallOption) (*PayzeLinkResponse, error)
	PayzeSaveCard(ctx context.Context, in *PayzeLinkRequest, opts ...grpc.CallOption) (*PayzeLinkResponseSaveCard, error)
}

type payzeServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewPayzeServiceClient(cc grpc.ClientConnInterface) PayzeServiceClient {
	return &payzeServiceClient{cc}
}

func (c *payzeServiceClient) GeneratePayzeLink(ctx context.Context, in *PayzeLinkRequest, opts ...grpc.CallOption) (*PayzeLinkResponse, error) {
	out := new(PayzeLinkResponse)
	err := c.cc.Invoke(ctx, "/integration_service_v2.PayzeService/GeneratePayzeLink", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *payzeServiceClient) PayzeSaveCard(ctx context.Context, in *PayzeLinkRequest, opts ...grpc.CallOption) (*PayzeLinkResponseSaveCard, error) {
	out := new(PayzeLinkResponseSaveCard)
	err := c.cc.Invoke(ctx, "/integration_service_v2.PayzeService/PayzeSaveCard", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// PayzeServiceServer is the server API for PayzeService service.
// All implementations must embed UnimplementedPayzeServiceServer
// for forward compatibility
type PayzeServiceServer interface {
	GeneratePayzeLink(context.Context, *PayzeLinkRequest) (*PayzeLinkResponse, error)
	PayzeSaveCard(context.Context, *PayzeLinkRequest) (*PayzeLinkResponseSaveCard, error)
	mustEmbedUnimplementedPayzeServiceServer()
}

// UnimplementedPayzeServiceServer must be embedded to have forward compatible implementations.
type UnimplementedPayzeServiceServer struct {
}

func (UnimplementedPayzeServiceServer) GeneratePayzeLink(context.Context, *PayzeLinkRequest) (*PayzeLinkResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GeneratePayzeLink not implemented")
}
func (UnimplementedPayzeServiceServer) PayzeSaveCard(context.Context, *PayzeLinkRequest) (*PayzeLinkResponseSaveCard, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PayzeSaveCard not implemented")
}
func (UnimplementedPayzeServiceServer) mustEmbedUnimplementedPayzeServiceServer() {}

// UnsafePayzeServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to PayzeServiceServer will
// result in compilation errors.
type UnsafePayzeServiceServer interface {
	mustEmbedUnimplementedPayzeServiceServer()
}

func RegisterPayzeServiceServer(s grpc.ServiceRegistrar, srv PayzeServiceServer) {
	s.RegisterService(&PayzeService_ServiceDesc, srv)
}

func _PayzeService_GeneratePayzeLink_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PayzeLinkRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PayzeServiceServer).GeneratePayzeLink(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/integration_service_v2.PayzeService/GeneratePayzeLink",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PayzeServiceServer).GeneratePayzeLink(ctx, req.(*PayzeLinkRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PayzeService_PayzeSaveCard_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PayzeLinkRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PayzeServiceServer).PayzeSaveCard(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/integration_service_v2.PayzeService/PayzeSaveCard",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PayzeServiceServer).PayzeSaveCard(ctx, req.(*PayzeLinkRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// PayzeService_ServiceDesc is the grpc.ServiceDesc for PayzeService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var PayzeService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "integration_service_v2.PayzeService",
	HandlerType: (*PayzeServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GeneratePayzeLink",
			Handler:    _PayzeService_GeneratePayzeLink_Handler,
		},
		{
			MethodName: "PayzeSaveCard",
			Handler:    _PayzeService_PayzeSaveCard_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "payze.proto",
}
