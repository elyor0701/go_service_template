// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.17.3
// source: new_function_folder.proto

package new_function_service

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// FunctionFolderServiceClient is the client API for FunctionFolderService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type FunctionFolderServiceClient interface {
	Create(ctx context.Context, in *CreateFunctionFolderRequest, opts ...grpc.CallOption) (*FunctionFolder, error)
	GetList(ctx context.Context, in *GetAllFunctionFoldersRequest, opts ...grpc.CallOption) (*GetAllFunctionFoldersResponse, error)
	GetSingle(ctx context.Context, in *FunctionFolderPrimaryKey, opts ...grpc.CallOption) (*FunctionFolder, error)
	Update(ctx context.Context, in *FunctionFolder, opts ...grpc.CallOption) (*emptypb.Empty, error)
	Delete(ctx context.Context, in *FunctionFolderPrimaryKey, opts ...grpc.CallOption) (*emptypb.Empty, error)
}

type functionFolderServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewFunctionFolderServiceClient(cc grpc.ClientConnInterface) FunctionFolderServiceClient {
	return &functionFolderServiceClient{cc}
}

func (c *functionFolderServiceClient) Create(ctx context.Context, in *CreateFunctionFolderRequest, opts ...grpc.CallOption) (*FunctionFolder, error) {
	out := new(FunctionFolder)
	err := c.cc.Invoke(ctx, "/new_function_service.FunctionFolderService/Create", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *functionFolderServiceClient) GetList(ctx context.Context, in *GetAllFunctionFoldersRequest, opts ...grpc.CallOption) (*GetAllFunctionFoldersResponse, error) {
	out := new(GetAllFunctionFoldersResponse)
	err := c.cc.Invoke(ctx, "/new_function_service.FunctionFolderService/GetList", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *functionFolderServiceClient) GetSingle(ctx context.Context, in *FunctionFolderPrimaryKey, opts ...grpc.CallOption) (*FunctionFolder, error) {
	out := new(FunctionFolder)
	err := c.cc.Invoke(ctx, "/new_function_service.FunctionFolderService/GetSingle", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *functionFolderServiceClient) Update(ctx context.Context, in *FunctionFolder, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/new_function_service.FunctionFolderService/Update", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *functionFolderServiceClient) Delete(ctx context.Context, in *FunctionFolderPrimaryKey, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/new_function_service.FunctionFolderService/Delete", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// FunctionFolderServiceServer is the server API for FunctionFolderService service.
// All implementations must embed UnimplementedFunctionFolderServiceServer
// for forward compatibility
type FunctionFolderServiceServer interface {
	Create(context.Context, *CreateFunctionFolderRequest) (*FunctionFolder, error)
	GetList(context.Context, *GetAllFunctionFoldersRequest) (*GetAllFunctionFoldersResponse, error)
	GetSingle(context.Context, *FunctionFolderPrimaryKey) (*FunctionFolder, error)
	Update(context.Context, *FunctionFolder) (*emptypb.Empty, error)
	Delete(context.Context, *FunctionFolderPrimaryKey) (*emptypb.Empty, error)
	mustEmbedUnimplementedFunctionFolderServiceServer()
}

// UnimplementedFunctionFolderServiceServer must be embedded to have forward compatible implementations.
type UnimplementedFunctionFolderServiceServer struct {
}

func (UnimplementedFunctionFolderServiceServer) Create(context.Context, *CreateFunctionFolderRequest) (*FunctionFolder, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Create not implemented")
}
func (UnimplementedFunctionFolderServiceServer) GetList(context.Context, *GetAllFunctionFoldersRequest) (*GetAllFunctionFoldersResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetList not implemented")
}
func (UnimplementedFunctionFolderServiceServer) GetSingle(context.Context, *FunctionFolderPrimaryKey) (*FunctionFolder, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetSingle not implemented")
}
func (UnimplementedFunctionFolderServiceServer) Update(context.Context, *FunctionFolder) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Update not implemented")
}
func (UnimplementedFunctionFolderServiceServer) Delete(context.Context, *FunctionFolderPrimaryKey) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Delete not implemented")
}
func (UnimplementedFunctionFolderServiceServer) mustEmbedUnimplementedFunctionFolderServiceServer() {}

// UnsafeFunctionFolderServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to FunctionFolderServiceServer will
// result in compilation errors.
type UnsafeFunctionFolderServiceServer interface {
	mustEmbedUnimplementedFunctionFolderServiceServer()
}

func RegisterFunctionFolderServiceServer(s grpc.ServiceRegistrar, srv FunctionFolderServiceServer) {
	s.RegisterService(&FunctionFolderService_ServiceDesc, srv)
}

func _FunctionFolderService_Create_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateFunctionFolderRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FunctionFolderServiceServer).Create(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/new_function_service.FunctionFolderService/Create",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FunctionFolderServiceServer).Create(ctx, req.(*CreateFunctionFolderRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _FunctionFolderService_GetList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetAllFunctionFoldersRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FunctionFolderServiceServer).GetList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/new_function_service.FunctionFolderService/GetList",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FunctionFolderServiceServer).GetList(ctx, req.(*GetAllFunctionFoldersRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _FunctionFolderService_GetSingle_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FunctionFolderPrimaryKey)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FunctionFolderServiceServer).GetSingle(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/new_function_service.FunctionFolderService/GetSingle",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FunctionFolderServiceServer).GetSingle(ctx, req.(*FunctionFolderPrimaryKey))
	}
	return interceptor(ctx, in, info, handler)
}

func _FunctionFolderService_Update_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FunctionFolder)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FunctionFolderServiceServer).Update(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/new_function_service.FunctionFolderService/Update",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FunctionFolderServiceServer).Update(ctx, req.(*FunctionFolder))
	}
	return interceptor(ctx, in, info, handler)
}

func _FunctionFolderService_Delete_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FunctionFolderPrimaryKey)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FunctionFolderServiceServer).Delete(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/new_function_service.FunctionFolderService/Delete",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FunctionFolderServiceServer).Delete(ctx, req.(*FunctionFolderPrimaryKey))
	}
	return interceptor(ctx, in, info, handler)
}

// FunctionFolderService_ServiceDesc is the grpc.ServiceDesc for FunctionFolderService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var FunctionFolderService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "new_function_service.FunctionFolderService",
	HandlerType: (*FunctionFolderServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Create",
			Handler:    _FunctionFolderService_Create_Handler,
		},
		{
			MethodName: "GetList",
			Handler:    _FunctionFolderService_GetList_Handler,
		},
		{
			MethodName: "GetSingle",
			Handler:    _FunctionFolderService_GetSingle_Handler,
		},
		{
			MethodName: "Update",
			Handler:    _FunctionFolderService_Update_Handler,
		},
		{
			MethodName: "Delete",
			Handler:    _FunctionFolderService_Delete_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "new_function_folder.proto",
}
