// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.17.3
// source: folder.proto

package query_service

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// FolderServiceClient is the client API for FolderService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type FolderServiceClient interface {
	CreateFolder(ctx context.Context, in *CreateFolderReq, opts ...grpc.CallOption) (*Folder, error)
	GetListFolder(ctx context.Context, in *GetListFolderReq, opts ...grpc.CallOption) (*GetListFolderRes, error)
	GetSingleFolder(ctx context.Context, in *GetSingleFolderReq, opts ...grpc.CallOption) (*GetSingleFolderRes, error)
	UpdateFolder(ctx context.Context, in *UpdateFolderReq, opts ...grpc.CallOption) (*Folder, error)
	DeleteFolder(ctx context.Context, in *DeleteFolderReq, opts ...grpc.CallOption) (*emptypb.Empty, error)
}

type folderServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewFolderServiceClient(cc grpc.ClientConnInterface) FolderServiceClient {
	return &folderServiceClient{cc}
}

func (c *folderServiceClient) CreateFolder(ctx context.Context, in *CreateFolderReq, opts ...grpc.CallOption) (*Folder, error) {
	out := new(Folder)
	err := c.cc.Invoke(ctx, "/query_service.FolderService/CreateFolder", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *folderServiceClient) GetListFolder(ctx context.Context, in *GetListFolderReq, opts ...grpc.CallOption) (*GetListFolderRes, error) {
	out := new(GetListFolderRes)
	err := c.cc.Invoke(ctx, "/query_service.FolderService/GetListFolder", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *folderServiceClient) GetSingleFolder(ctx context.Context, in *GetSingleFolderReq, opts ...grpc.CallOption) (*GetSingleFolderRes, error) {
	out := new(GetSingleFolderRes)
	err := c.cc.Invoke(ctx, "/query_service.FolderService/GetSingleFolder", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *folderServiceClient) UpdateFolder(ctx context.Context, in *UpdateFolderReq, opts ...grpc.CallOption) (*Folder, error) {
	out := new(Folder)
	err := c.cc.Invoke(ctx, "/query_service.FolderService/UpdateFolder", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *folderServiceClient) DeleteFolder(ctx context.Context, in *DeleteFolderReq, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/query_service.FolderService/DeleteFolder", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// FolderServiceServer is the server API for FolderService service.
// All implementations must embed UnimplementedFolderServiceServer
// for forward compatibility
type FolderServiceServer interface {
	CreateFolder(context.Context, *CreateFolderReq) (*Folder, error)
	GetListFolder(context.Context, *GetListFolderReq) (*GetListFolderRes, error)
	GetSingleFolder(context.Context, *GetSingleFolderReq) (*GetSingleFolderRes, error)
	UpdateFolder(context.Context, *UpdateFolderReq) (*Folder, error)
	DeleteFolder(context.Context, *DeleteFolderReq) (*emptypb.Empty, error)
	mustEmbedUnimplementedFolderServiceServer()
}

// UnimplementedFolderServiceServer must be embedded to have forward compatible implementations.
type UnimplementedFolderServiceServer struct {
}

func (UnimplementedFolderServiceServer) CreateFolder(context.Context, *CreateFolderReq) (*Folder, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateFolder not implemented")
}
func (UnimplementedFolderServiceServer) GetListFolder(context.Context, *GetListFolderReq) (*GetListFolderRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetListFolder not implemented")
}
func (UnimplementedFolderServiceServer) GetSingleFolder(context.Context, *GetSingleFolderReq) (*GetSingleFolderRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetSingleFolder not implemented")
}
func (UnimplementedFolderServiceServer) UpdateFolder(context.Context, *UpdateFolderReq) (*Folder, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateFolder not implemented")
}
func (UnimplementedFolderServiceServer) DeleteFolder(context.Context, *DeleteFolderReq) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteFolder not implemented")
}
func (UnimplementedFolderServiceServer) mustEmbedUnimplementedFolderServiceServer() {}

// UnsafeFolderServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to FolderServiceServer will
// result in compilation errors.
type UnsafeFolderServiceServer interface {
	mustEmbedUnimplementedFolderServiceServer()
}

func RegisterFolderServiceServer(s grpc.ServiceRegistrar, srv FolderServiceServer) {
	s.RegisterService(&FolderService_ServiceDesc, srv)
}

func _FolderService_CreateFolder_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateFolderReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FolderServiceServer).CreateFolder(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/query_service.FolderService/CreateFolder",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FolderServiceServer).CreateFolder(ctx, req.(*CreateFolderReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _FolderService_GetListFolder_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetListFolderReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FolderServiceServer).GetListFolder(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/query_service.FolderService/GetListFolder",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FolderServiceServer).GetListFolder(ctx, req.(*GetListFolderReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _FolderService_GetSingleFolder_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetSingleFolderReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FolderServiceServer).GetSingleFolder(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/query_service.FolderService/GetSingleFolder",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FolderServiceServer).GetSingleFolder(ctx, req.(*GetSingleFolderReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _FolderService_UpdateFolder_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateFolderReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FolderServiceServer).UpdateFolder(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/query_service.FolderService/UpdateFolder",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FolderServiceServer).UpdateFolder(ctx, req.(*UpdateFolderReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _FolderService_DeleteFolder_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteFolderReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FolderServiceServer).DeleteFolder(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/query_service.FolderService/DeleteFolder",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FolderServiceServer).DeleteFolder(ctx, req.(*DeleteFolderReq))
	}
	return interceptor(ctx, in, info, handler)
}

// FolderService_ServiceDesc is the grpc.ServiceDesc for FolderService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var FolderService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "query_service.FolderService",
	HandlerType: (*FolderServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateFolder",
			Handler:    _FolderService_CreateFolder_Handler,
		},
		{
			MethodName: "GetListFolder",
			Handler:    _FolderService_GetListFolder_Handler,
		},
		{
			MethodName: "GetSingleFolder",
			Handler:    _FolderService_GetSingleFolder_Handler,
		},
		{
			MethodName: "UpdateFolder",
			Handler:    _FolderService_UpdateFolder_Handler,
		},
		{
			MethodName: "DeleteFolder",
			Handler:    _FolderService_DeleteFolder_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "folder.proto",
}
