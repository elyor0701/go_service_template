// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.17.3
// source: api_keys.proto

package auth_service

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// ApiKeysClient is the client API for ApiKeys service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ApiKeysClient interface {
	Create(ctx context.Context, in *CreateReq, opts ...grpc.CallOption) (*CreateRes, error)
	Update(ctx context.Context, in *UpdateReq, opts ...grpc.CallOption) (*UpdateRes, error)
	Get(ctx context.Context, in *GetReq, opts ...grpc.CallOption) (*GetRes, error)
	GetList(ctx context.Context, in *GetListReq, opts ...grpc.CallOption) (*GetListRes, error)
	Delete(ctx context.Context, in *DeleteReq, opts ...grpc.CallOption) (*DeleteRes, error)
	GenerateApiToken(ctx context.Context, in *GenerateApiTokenReq, opts ...grpc.CallOption) (*GenerateApiTokenRes, error)
	RefreshApiToken(ctx context.Context, in *RefreshApiTokenReq, opts ...grpc.CallOption) (*RefreshApiTokenRes, error)
	GetEnvID(ctx context.Context, in *GetReq, opts ...grpc.CallOption) (*GetRes, error)
}

type apiKeysClient struct {
	cc grpc.ClientConnInterface
}

func NewApiKeysClient(cc grpc.ClientConnInterface) ApiKeysClient {
	return &apiKeysClient{cc}
}

func (c *apiKeysClient) Create(ctx context.Context, in *CreateReq, opts ...grpc.CallOption) (*CreateRes, error) {
	out := new(CreateRes)
	err := c.cc.Invoke(ctx, "/auth_service.ApiKeys/Create", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *apiKeysClient) Update(ctx context.Context, in *UpdateReq, opts ...grpc.CallOption) (*UpdateRes, error) {
	out := new(UpdateRes)
	err := c.cc.Invoke(ctx, "/auth_service.ApiKeys/Update", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *apiKeysClient) Get(ctx context.Context, in *GetReq, opts ...grpc.CallOption) (*GetRes, error) {
	out := new(GetRes)
	err := c.cc.Invoke(ctx, "/auth_service.ApiKeys/Get", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *apiKeysClient) GetList(ctx context.Context, in *GetListReq, opts ...grpc.CallOption) (*GetListRes, error) {
	out := new(GetListRes)
	err := c.cc.Invoke(ctx, "/auth_service.ApiKeys/GetList", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *apiKeysClient) Delete(ctx context.Context, in *DeleteReq, opts ...grpc.CallOption) (*DeleteRes, error) {
	out := new(DeleteRes)
	err := c.cc.Invoke(ctx, "/auth_service.ApiKeys/Delete", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *apiKeysClient) GenerateApiToken(ctx context.Context, in *GenerateApiTokenReq, opts ...grpc.CallOption) (*GenerateApiTokenRes, error) {
	out := new(GenerateApiTokenRes)
	err := c.cc.Invoke(ctx, "/auth_service.ApiKeys/GenerateApiToken", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *apiKeysClient) RefreshApiToken(ctx context.Context, in *RefreshApiTokenReq, opts ...grpc.CallOption) (*RefreshApiTokenRes, error) {
	out := new(RefreshApiTokenRes)
	err := c.cc.Invoke(ctx, "/auth_service.ApiKeys/RefreshApiToken", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *apiKeysClient) GetEnvID(ctx context.Context, in *GetReq, opts ...grpc.CallOption) (*GetRes, error) {
	out := new(GetRes)
	err := c.cc.Invoke(ctx, "/auth_service.ApiKeys/GetEnvID", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ApiKeysServer is the server API for ApiKeys service.
// All implementations must embed UnimplementedApiKeysServer
// for forward compatibility
type ApiKeysServer interface {
	Create(context.Context, *CreateReq) (*CreateRes, error)
	Update(context.Context, *UpdateReq) (*UpdateRes, error)
	Get(context.Context, *GetReq) (*GetRes, error)
	GetList(context.Context, *GetListReq) (*GetListRes, error)
	Delete(context.Context, *DeleteReq) (*DeleteRes, error)
	GenerateApiToken(context.Context, *GenerateApiTokenReq) (*GenerateApiTokenRes, error)
	RefreshApiToken(context.Context, *RefreshApiTokenReq) (*RefreshApiTokenRes, error)
	GetEnvID(context.Context, *GetReq) (*GetRes, error)
	mustEmbedUnimplementedApiKeysServer()
}

// UnimplementedApiKeysServer must be embedded to have forward compatible implementations.
type UnimplementedApiKeysServer struct {
}

func (UnimplementedApiKeysServer) Create(context.Context, *CreateReq) (*CreateRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Create not implemented")
}
func (UnimplementedApiKeysServer) Update(context.Context, *UpdateReq) (*UpdateRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Update not implemented")
}
func (UnimplementedApiKeysServer) Get(context.Context, *GetReq) (*GetRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Get not implemented")
}
func (UnimplementedApiKeysServer) GetList(context.Context, *GetListReq) (*GetListRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetList not implemented")
}
func (UnimplementedApiKeysServer) Delete(context.Context, *DeleteReq) (*DeleteRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Delete not implemented")
}
func (UnimplementedApiKeysServer) GenerateApiToken(context.Context, *GenerateApiTokenReq) (*GenerateApiTokenRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GenerateApiToken not implemented")
}
func (UnimplementedApiKeysServer) RefreshApiToken(context.Context, *RefreshApiTokenReq) (*RefreshApiTokenRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RefreshApiToken not implemented")
}
func (UnimplementedApiKeysServer) GetEnvID(context.Context, *GetReq) (*GetRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetEnvID not implemented")
}
func (UnimplementedApiKeysServer) mustEmbedUnimplementedApiKeysServer() {}

// UnsafeApiKeysServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ApiKeysServer will
// result in compilation errors.
type UnsafeApiKeysServer interface {
	mustEmbedUnimplementedApiKeysServer()
}

func RegisterApiKeysServer(s grpc.ServiceRegistrar, srv ApiKeysServer) {
	s.RegisterService(&ApiKeys_ServiceDesc, srv)
}

func _ApiKeys_Create_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ApiKeysServer).Create(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/auth_service.ApiKeys/Create",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ApiKeysServer).Create(ctx, req.(*CreateReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _ApiKeys_Update_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ApiKeysServer).Update(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/auth_service.ApiKeys/Update",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ApiKeysServer).Update(ctx, req.(*UpdateReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _ApiKeys_Get_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ApiKeysServer).Get(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/auth_service.ApiKeys/Get",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ApiKeysServer).Get(ctx, req.(*GetReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _ApiKeys_GetList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetListReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ApiKeysServer).GetList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/auth_service.ApiKeys/GetList",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ApiKeysServer).GetList(ctx, req.(*GetListReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _ApiKeys_Delete_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ApiKeysServer).Delete(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/auth_service.ApiKeys/Delete",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ApiKeysServer).Delete(ctx, req.(*DeleteReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _ApiKeys_GenerateApiToken_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GenerateApiTokenReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ApiKeysServer).GenerateApiToken(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/auth_service.ApiKeys/GenerateApiToken",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ApiKeysServer).GenerateApiToken(ctx, req.(*GenerateApiTokenReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _ApiKeys_RefreshApiToken_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RefreshApiTokenReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ApiKeysServer).RefreshApiToken(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/auth_service.ApiKeys/RefreshApiToken",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ApiKeysServer).RefreshApiToken(ctx, req.(*RefreshApiTokenReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _ApiKeys_GetEnvID_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ApiKeysServer).GetEnvID(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/auth_service.ApiKeys/GetEnvID",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ApiKeysServer).GetEnvID(ctx, req.(*GetReq))
	}
	return interceptor(ctx, in, info, handler)
}

// ApiKeys_ServiceDesc is the grpc.ServiceDesc for ApiKeys service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var ApiKeys_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "auth_service.ApiKeys",
	HandlerType: (*ApiKeysServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Create",
			Handler:    _ApiKeys_Create_Handler,
		},
		{
			MethodName: "Update",
			Handler:    _ApiKeys_Update_Handler,
		},
		{
			MethodName: "Get",
			Handler:    _ApiKeys_Get_Handler,
		},
		{
			MethodName: "GetList",
			Handler:    _ApiKeys_GetList_Handler,
		},
		{
			MethodName: "Delete",
			Handler:    _ApiKeys_Delete_Handler,
		},
		{
			MethodName: "GenerateApiToken",
			Handler:    _ApiKeys_GenerateApiToken_Handler,
		},
		{
			MethodName: "RefreshApiToken",
			Handler:    _ApiKeys_RefreshApiToken_Handler,
		},
		{
			MethodName: "GetEnvID",
			Handler:    _ApiKeys_GetEnvID_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "api_keys.proto",
}
