// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.17.3
// source: postgres_fields_and_relations.proto

package postgres_object_builder_service

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// FieldAndRelationServiceClient is the client API for FieldAndRelationService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type FieldAndRelationServiceClient interface {
	CreateFieldsAndRelations(ctx context.Context, in *CreateFieldsAndRelationsRequest, opts ...grpc.CallOption) (*CreateFieldsAndRelationsResponse, error)
}

type fieldAndRelationServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewFieldAndRelationServiceClient(cc grpc.ClientConnInterface) FieldAndRelationServiceClient {
	return &fieldAndRelationServiceClient{cc}
}

func (c *fieldAndRelationServiceClient) CreateFieldsAndRelations(ctx context.Context, in *CreateFieldsAndRelationsRequest, opts ...grpc.CallOption) (*CreateFieldsAndRelationsResponse, error) {
	out := new(CreateFieldsAndRelationsResponse)
	err := c.cc.Invoke(ctx, "/postgres_object_builder_service.FieldAndRelationService/CreateFieldsAndRelations", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// FieldAndRelationServiceServer is the server API for FieldAndRelationService service.
// All implementations must embed UnimplementedFieldAndRelationServiceServer
// for forward compatibility
type FieldAndRelationServiceServer interface {
	CreateFieldsAndRelations(context.Context, *CreateFieldsAndRelationsRequest) (*CreateFieldsAndRelationsResponse, error)
	mustEmbedUnimplementedFieldAndRelationServiceServer()
}

// UnimplementedFieldAndRelationServiceServer must be embedded to have forward compatible implementations.
type UnimplementedFieldAndRelationServiceServer struct {
}

func (UnimplementedFieldAndRelationServiceServer) CreateFieldsAndRelations(context.Context, *CreateFieldsAndRelationsRequest) (*CreateFieldsAndRelationsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateFieldsAndRelations not implemented")
}
func (UnimplementedFieldAndRelationServiceServer) mustEmbedUnimplementedFieldAndRelationServiceServer() {
}

// UnsafeFieldAndRelationServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to FieldAndRelationServiceServer will
// result in compilation errors.
type UnsafeFieldAndRelationServiceServer interface {
	mustEmbedUnimplementedFieldAndRelationServiceServer()
}

func RegisterFieldAndRelationServiceServer(s grpc.ServiceRegistrar, srv FieldAndRelationServiceServer) {
	s.RegisterService(&FieldAndRelationService_ServiceDesc, srv)
}

func _FieldAndRelationService_CreateFieldsAndRelations_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateFieldsAndRelationsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FieldAndRelationServiceServer).CreateFieldsAndRelations(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/postgres_object_builder_service.FieldAndRelationService/CreateFieldsAndRelations",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FieldAndRelationServiceServer).CreateFieldsAndRelations(ctx, req.(*CreateFieldsAndRelationsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// FieldAndRelationService_ServiceDesc is the grpc.ServiceDesc for FieldAndRelationService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var FieldAndRelationService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "postgres_object_builder_service.FieldAndRelationService",
	HandlerType: (*FieldAndRelationServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateFieldsAndRelations",
			Handler:    _FieldAndRelationService_CreateFieldsAndRelations_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "postgres_fields_and_relations.proto",
}
