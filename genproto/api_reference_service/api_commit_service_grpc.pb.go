// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.17.3
// source: api_commit_service.proto

package api_reference_service

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// CommitServiceClient is the client API for CommitService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type CommitServiceClient interface {
	Create(ctx context.Context, in *CreateCommitRequest, opts ...grpc.CallOption) (*CommitWithRelease, error)
	GetByID(ctx context.Context, in *CommitPrimaryKey, opts ...grpc.CallOption) (*CommitWithRelease, error)
	Update(ctx context.Context, in *CommitWithRelease, opts ...grpc.CallOption) (*CommitWithRelease, error)
	GetList(ctx context.Context, in *GetCommitListRequest, opts ...grpc.CallOption) (*GetCommitListResponse, error)
	Restore(ctx context.Context, in *RestoreCommitRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	Insert(ctx context.Context, in *CreateCommitRequest, opts ...grpc.CallOption) (*InsertCommitResponse, error)
	GetMultipleCommitInfo(ctx context.Context, in *GetMultipleCommitInfoRequest, opts ...grpc.CallOption) (*GetMultipleCommitInfoResponse, error)
}

type commitServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewCommitServiceClient(cc grpc.ClientConnInterface) CommitServiceClient {
	return &commitServiceClient{cc}
}

func (c *commitServiceClient) Create(ctx context.Context, in *CreateCommitRequest, opts ...grpc.CallOption) (*CommitWithRelease, error) {
	out := new(CommitWithRelease)
	err := c.cc.Invoke(ctx, "/api_reference_service.CommitService/Create", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *commitServiceClient) GetByID(ctx context.Context, in *CommitPrimaryKey, opts ...grpc.CallOption) (*CommitWithRelease, error) {
	out := new(CommitWithRelease)
	err := c.cc.Invoke(ctx, "/api_reference_service.CommitService/GetByID", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *commitServiceClient) Update(ctx context.Context, in *CommitWithRelease, opts ...grpc.CallOption) (*CommitWithRelease, error) {
	out := new(CommitWithRelease)
	err := c.cc.Invoke(ctx, "/api_reference_service.CommitService/Update", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *commitServiceClient) GetList(ctx context.Context, in *GetCommitListRequest, opts ...grpc.CallOption) (*GetCommitListResponse, error) {
	out := new(GetCommitListResponse)
	err := c.cc.Invoke(ctx, "/api_reference_service.CommitService/GetList", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *commitServiceClient) Restore(ctx context.Context, in *RestoreCommitRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/api_reference_service.CommitService/Restore", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *commitServiceClient) Insert(ctx context.Context, in *CreateCommitRequest, opts ...grpc.CallOption) (*InsertCommitResponse, error) {
	out := new(InsertCommitResponse)
	err := c.cc.Invoke(ctx, "/api_reference_service.CommitService/Insert", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *commitServiceClient) GetMultipleCommitInfo(ctx context.Context, in *GetMultipleCommitInfoRequest, opts ...grpc.CallOption) (*GetMultipleCommitInfoResponse, error) {
	out := new(GetMultipleCommitInfoResponse)
	err := c.cc.Invoke(ctx, "/api_reference_service.CommitService/GetMultipleCommitInfo", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// CommitServiceServer is the server API for CommitService service.
// All implementations must embed UnimplementedCommitServiceServer
// for forward compatibility
type CommitServiceServer interface {
	Create(context.Context, *CreateCommitRequest) (*CommitWithRelease, error)
	GetByID(context.Context, *CommitPrimaryKey) (*CommitWithRelease, error)
	Update(context.Context, *CommitWithRelease) (*CommitWithRelease, error)
	GetList(context.Context, *GetCommitListRequest) (*GetCommitListResponse, error)
	Restore(context.Context, *RestoreCommitRequest) (*emptypb.Empty, error)
	Insert(context.Context, *CreateCommitRequest) (*InsertCommitResponse, error)
	GetMultipleCommitInfo(context.Context, *GetMultipleCommitInfoRequest) (*GetMultipleCommitInfoResponse, error)
	mustEmbedUnimplementedCommitServiceServer()
}

// UnimplementedCommitServiceServer must be embedded to have forward compatible implementations.
type UnimplementedCommitServiceServer struct {
}

func (UnimplementedCommitServiceServer) Create(context.Context, *CreateCommitRequest) (*CommitWithRelease, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Create not implemented")
}
func (UnimplementedCommitServiceServer) GetByID(context.Context, *CommitPrimaryKey) (*CommitWithRelease, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetByID not implemented")
}
func (UnimplementedCommitServiceServer) Update(context.Context, *CommitWithRelease) (*CommitWithRelease, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Update not implemented")
}
func (UnimplementedCommitServiceServer) GetList(context.Context, *GetCommitListRequest) (*GetCommitListResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetList not implemented")
}
func (UnimplementedCommitServiceServer) Restore(context.Context, *RestoreCommitRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Restore not implemented")
}
func (UnimplementedCommitServiceServer) Insert(context.Context, *CreateCommitRequest) (*InsertCommitResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Insert not implemented")
}
func (UnimplementedCommitServiceServer) GetMultipleCommitInfo(context.Context, *GetMultipleCommitInfoRequest) (*GetMultipleCommitInfoResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetMultipleCommitInfo not implemented")
}
func (UnimplementedCommitServiceServer) mustEmbedUnimplementedCommitServiceServer() {}

// UnsafeCommitServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to CommitServiceServer will
// result in compilation errors.
type UnsafeCommitServiceServer interface {
	mustEmbedUnimplementedCommitServiceServer()
}

func RegisterCommitServiceServer(s grpc.ServiceRegistrar, srv CommitServiceServer) {
	s.RegisterService(&CommitService_ServiceDesc, srv)
}

func _CommitService_Create_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateCommitRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CommitServiceServer).Create(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api_reference_service.CommitService/Create",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CommitServiceServer).Create(ctx, req.(*CreateCommitRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CommitService_GetByID_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CommitPrimaryKey)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CommitServiceServer).GetByID(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api_reference_service.CommitService/GetByID",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CommitServiceServer).GetByID(ctx, req.(*CommitPrimaryKey))
	}
	return interceptor(ctx, in, info, handler)
}

func _CommitService_Update_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CommitWithRelease)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CommitServiceServer).Update(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api_reference_service.CommitService/Update",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CommitServiceServer).Update(ctx, req.(*CommitWithRelease))
	}
	return interceptor(ctx, in, info, handler)
}

func _CommitService_GetList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetCommitListRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CommitServiceServer).GetList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api_reference_service.CommitService/GetList",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CommitServiceServer).GetList(ctx, req.(*GetCommitListRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CommitService_Restore_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RestoreCommitRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CommitServiceServer).Restore(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api_reference_service.CommitService/Restore",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CommitServiceServer).Restore(ctx, req.(*RestoreCommitRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CommitService_Insert_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateCommitRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CommitServiceServer).Insert(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api_reference_service.CommitService/Insert",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CommitServiceServer).Insert(ctx, req.(*CreateCommitRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CommitService_GetMultipleCommitInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetMultipleCommitInfoRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CommitServiceServer).GetMultipleCommitInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api_reference_service.CommitService/GetMultipleCommitInfo",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CommitServiceServer).GetMultipleCommitInfo(ctx, req.(*GetMultipleCommitInfoRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// CommitService_ServiceDesc is the grpc.ServiceDesc for CommitService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var CommitService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "api_reference_service.CommitService",
	HandlerType: (*CommitServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Create",
			Handler:    _CommitService_Create_Handler,
		},
		{
			MethodName: "GetByID",
			Handler:    _CommitService_GetByID_Handler,
		},
		{
			MethodName: "Update",
			Handler:    _CommitService_Update_Handler,
		},
		{
			MethodName: "GetList",
			Handler:    _CommitService_GetList_Handler,
		},
		{
			MethodName: "Restore",
			Handler:    _CommitService_Restore_Handler,
		},
		{
			MethodName: "Insert",
			Handler:    _CommitService_Insert_Handler,
		},
		{
			MethodName: "GetMultipleCommitInfo",
			Handler:    _CommitService_GetMultipleCommitInfo_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "api_commit_service.proto",
}
