// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.17.3
// source: note.proto

package template_service

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// NoteFolderServiceClient is the client API for NoteFolderService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type NoteFolderServiceClient interface {
	// note rpc methods
	CreateNote(ctx context.Context, in *CreateNoteReq, opts ...grpc.CallOption) (*Note, error)
	GetListNote(ctx context.Context, in *GetListNoteReq, opts ...grpc.CallOption) (*GetListNoteRes, error)
	GetSingleNote(ctx context.Context, in *GetSingleNoteReq, opts ...grpc.CallOption) (*Note, error)
	UpdateNote(ctx context.Context, in *UpdateNoteReq, opts ...grpc.CallOption) (*Note, error)
	DeleteNote(ctx context.Context, in *DeleteNoteReq, opts ...grpc.CallOption) (*emptypb.Empty, error)
	GetNoteObjectCommits(ctx context.Context, in *GetNoteObjectCommitsReq, opts ...grpc.CallOption) (*GetListNoteRes, error)
	// folder rpc methods
	CreateFolderNote(ctx context.Context, in *CreateFolderNoteReq, opts ...grpc.CallOption) (*FolderNote, error)
	GetListFolderNote(ctx context.Context, in *GetListFolderNoteReq, opts ...grpc.CallOption) (*GetListFolderNoteRes, error)
	GetSingleFolderNote(ctx context.Context, in *GetSingleFolderNoteReq, opts ...grpc.CallOption) (*GetSingleFolderNoteRes, error)
	UpdateFolderNote(ctx context.Context, in *UpdateFolderNoteReq, opts ...grpc.CallOption) (*FolderNote, error)
	DeleteFolderNote(ctx context.Context, in *DeleteFolderNoteReq, opts ...grpc.CallOption) (*emptypb.Empty, error)
	GetNoteFolderObjectCommits(ctx context.Context, in *GetNoteFolderObjectCommitsReq, opts ...grpc.CallOption) (*GetListFolderNoteRes, error)
}

type noteFolderServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewNoteFolderServiceClient(cc grpc.ClientConnInterface) NoteFolderServiceClient {
	return &noteFolderServiceClient{cc}
}

func (c *noteFolderServiceClient) CreateNote(ctx context.Context, in *CreateNoteReq, opts ...grpc.CallOption) (*Note, error) {
	out := new(Note)
	err := c.cc.Invoke(ctx, "/note_service.NoteFolderService/CreateNote", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *noteFolderServiceClient) GetListNote(ctx context.Context, in *GetListNoteReq, opts ...grpc.CallOption) (*GetListNoteRes, error) {
	out := new(GetListNoteRes)
	err := c.cc.Invoke(ctx, "/note_service.NoteFolderService/GetListNote", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *noteFolderServiceClient) GetSingleNote(ctx context.Context, in *GetSingleNoteReq, opts ...grpc.CallOption) (*Note, error) {
	out := new(Note)
	err := c.cc.Invoke(ctx, "/note_service.NoteFolderService/GetSingleNote", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *noteFolderServiceClient) UpdateNote(ctx context.Context, in *UpdateNoteReq, opts ...grpc.CallOption) (*Note, error) {
	out := new(Note)
	err := c.cc.Invoke(ctx, "/note_service.NoteFolderService/UpdateNote", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *noteFolderServiceClient) DeleteNote(ctx context.Context, in *DeleteNoteReq, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/note_service.NoteFolderService/DeleteNote", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *noteFolderServiceClient) GetNoteObjectCommits(ctx context.Context, in *GetNoteObjectCommitsReq, opts ...grpc.CallOption) (*GetListNoteRes, error) {
	out := new(GetListNoteRes)
	err := c.cc.Invoke(ctx, "/note_service.NoteFolderService/GetNoteObjectCommits", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *noteFolderServiceClient) CreateFolderNote(ctx context.Context, in *CreateFolderNoteReq, opts ...grpc.CallOption) (*FolderNote, error) {
	out := new(FolderNote)
	err := c.cc.Invoke(ctx, "/note_service.NoteFolderService/CreateFolderNote", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *noteFolderServiceClient) GetListFolderNote(ctx context.Context, in *GetListFolderNoteReq, opts ...grpc.CallOption) (*GetListFolderNoteRes, error) {
	out := new(GetListFolderNoteRes)
	err := c.cc.Invoke(ctx, "/note_service.NoteFolderService/GetListFolderNote", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *noteFolderServiceClient) GetSingleFolderNote(ctx context.Context, in *GetSingleFolderNoteReq, opts ...grpc.CallOption) (*GetSingleFolderNoteRes, error) {
	out := new(GetSingleFolderNoteRes)
	err := c.cc.Invoke(ctx, "/note_service.NoteFolderService/GetSingleFolderNote", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *noteFolderServiceClient) UpdateFolderNote(ctx context.Context, in *UpdateFolderNoteReq, opts ...grpc.CallOption) (*FolderNote, error) {
	out := new(FolderNote)
	err := c.cc.Invoke(ctx, "/note_service.NoteFolderService/UpdateFolderNote", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *noteFolderServiceClient) DeleteFolderNote(ctx context.Context, in *DeleteFolderNoteReq, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/note_service.NoteFolderService/DeleteFolderNote", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *noteFolderServiceClient) GetNoteFolderObjectCommits(ctx context.Context, in *GetNoteFolderObjectCommitsReq, opts ...grpc.CallOption) (*GetListFolderNoteRes, error) {
	out := new(GetListFolderNoteRes)
	err := c.cc.Invoke(ctx, "/note_service.NoteFolderService/GetNoteFolderObjectCommits", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// NoteFolderServiceServer is the server API for NoteFolderService service.
// All implementations must embed UnimplementedNoteFolderServiceServer
// for forward compatibility
type NoteFolderServiceServer interface {
	// note rpc methods
	CreateNote(context.Context, *CreateNoteReq) (*Note, error)
	GetListNote(context.Context, *GetListNoteReq) (*GetListNoteRes, error)
	GetSingleNote(context.Context, *GetSingleNoteReq) (*Note, error)
	UpdateNote(context.Context, *UpdateNoteReq) (*Note, error)
	DeleteNote(context.Context, *DeleteNoteReq) (*emptypb.Empty, error)
	GetNoteObjectCommits(context.Context, *GetNoteObjectCommitsReq) (*GetListNoteRes, error)
	// folder rpc methods
	CreateFolderNote(context.Context, *CreateFolderNoteReq) (*FolderNote, error)
	GetListFolderNote(context.Context, *GetListFolderNoteReq) (*GetListFolderNoteRes, error)
	GetSingleFolderNote(context.Context, *GetSingleFolderNoteReq) (*GetSingleFolderNoteRes, error)
	UpdateFolderNote(context.Context, *UpdateFolderNoteReq) (*FolderNote, error)
	DeleteFolderNote(context.Context, *DeleteFolderNoteReq) (*emptypb.Empty, error)
	GetNoteFolderObjectCommits(context.Context, *GetNoteFolderObjectCommitsReq) (*GetListFolderNoteRes, error)
	mustEmbedUnimplementedNoteFolderServiceServer()
}

// UnimplementedNoteFolderServiceServer must be embedded to have forward compatible implementations.
type UnimplementedNoteFolderServiceServer struct {
}

func (UnimplementedNoteFolderServiceServer) CreateNote(context.Context, *CreateNoteReq) (*Note, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateNote not implemented")
}
func (UnimplementedNoteFolderServiceServer) GetListNote(context.Context, *GetListNoteReq) (*GetListNoteRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetListNote not implemented")
}
func (UnimplementedNoteFolderServiceServer) GetSingleNote(context.Context, *GetSingleNoteReq) (*Note, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetSingleNote not implemented")
}
func (UnimplementedNoteFolderServiceServer) UpdateNote(context.Context, *UpdateNoteReq) (*Note, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateNote not implemented")
}
func (UnimplementedNoteFolderServiceServer) DeleteNote(context.Context, *DeleteNoteReq) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteNote not implemented")
}
func (UnimplementedNoteFolderServiceServer) GetNoteObjectCommits(context.Context, *GetNoteObjectCommitsReq) (*GetListNoteRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetNoteObjectCommits not implemented")
}
func (UnimplementedNoteFolderServiceServer) CreateFolderNote(context.Context, *CreateFolderNoteReq) (*FolderNote, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateFolderNote not implemented")
}
func (UnimplementedNoteFolderServiceServer) GetListFolderNote(context.Context, *GetListFolderNoteReq) (*GetListFolderNoteRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetListFolderNote not implemented")
}
func (UnimplementedNoteFolderServiceServer) GetSingleFolderNote(context.Context, *GetSingleFolderNoteReq) (*GetSingleFolderNoteRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetSingleFolderNote not implemented")
}
func (UnimplementedNoteFolderServiceServer) UpdateFolderNote(context.Context, *UpdateFolderNoteReq) (*FolderNote, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateFolderNote not implemented")
}
func (UnimplementedNoteFolderServiceServer) DeleteFolderNote(context.Context, *DeleteFolderNoteReq) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteFolderNote not implemented")
}
func (UnimplementedNoteFolderServiceServer) GetNoteFolderObjectCommits(context.Context, *GetNoteFolderObjectCommitsReq) (*GetListFolderNoteRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetNoteFolderObjectCommits not implemented")
}
func (UnimplementedNoteFolderServiceServer) mustEmbedUnimplementedNoteFolderServiceServer() {}

// UnsafeNoteFolderServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to NoteFolderServiceServer will
// result in compilation errors.
type UnsafeNoteFolderServiceServer interface {
	mustEmbedUnimplementedNoteFolderServiceServer()
}

func RegisterNoteFolderServiceServer(s grpc.ServiceRegistrar, srv NoteFolderServiceServer) {
	s.RegisterService(&NoteFolderService_ServiceDesc, srv)
}

func _NoteFolderService_CreateNote_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateNoteReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NoteFolderServiceServer).CreateNote(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/note_service.NoteFolderService/CreateNote",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NoteFolderServiceServer).CreateNote(ctx, req.(*CreateNoteReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _NoteFolderService_GetListNote_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetListNoteReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NoteFolderServiceServer).GetListNote(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/note_service.NoteFolderService/GetListNote",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NoteFolderServiceServer).GetListNote(ctx, req.(*GetListNoteReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _NoteFolderService_GetSingleNote_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetSingleNoteReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NoteFolderServiceServer).GetSingleNote(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/note_service.NoteFolderService/GetSingleNote",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NoteFolderServiceServer).GetSingleNote(ctx, req.(*GetSingleNoteReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _NoteFolderService_UpdateNote_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateNoteReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NoteFolderServiceServer).UpdateNote(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/note_service.NoteFolderService/UpdateNote",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NoteFolderServiceServer).UpdateNote(ctx, req.(*UpdateNoteReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _NoteFolderService_DeleteNote_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteNoteReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NoteFolderServiceServer).DeleteNote(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/note_service.NoteFolderService/DeleteNote",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NoteFolderServiceServer).DeleteNote(ctx, req.(*DeleteNoteReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _NoteFolderService_GetNoteObjectCommits_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetNoteObjectCommitsReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NoteFolderServiceServer).GetNoteObjectCommits(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/note_service.NoteFolderService/GetNoteObjectCommits",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NoteFolderServiceServer).GetNoteObjectCommits(ctx, req.(*GetNoteObjectCommitsReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _NoteFolderService_CreateFolderNote_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateFolderNoteReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NoteFolderServiceServer).CreateFolderNote(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/note_service.NoteFolderService/CreateFolderNote",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NoteFolderServiceServer).CreateFolderNote(ctx, req.(*CreateFolderNoteReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _NoteFolderService_GetListFolderNote_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetListFolderNoteReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NoteFolderServiceServer).GetListFolderNote(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/note_service.NoteFolderService/GetListFolderNote",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NoteFolderServiceServer).GetListFolderNote(ctx, req.(*GetListFolderNoteReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _NoteFolderService_GetSingleFolderNote_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetSingleFolderNoteReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NoteFolderServiceServer).GetSingleFolderNote(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/note_service.NoteFolderService/GetSingleFolderNote",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NoteFolderServiceServer).GetSingleFolderNote(ctx, req.(*GetSingleFolderNoteReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _NoteFolderService_UpdateFolderNote_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateFolderNoteReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NoteFolderServiceServer).UpdateFolderNote(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/note_service.NoteFolderService/UpdateFolderNote",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NoteFolderServiceServer).UpdateFolderNote(ctx, req.(*UpdateFolderNoteReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _NoteFolderService_DeleteFolderNote_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteFolderNoteReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NoteFolderServiceServer).DeleteFolderNote(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/note_service.NoteFolderService/DeleteFolderNote",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NoteFolderServiceServer).DeleteFolderNote(ctx, req.(*DeleteFolderNoteReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _NoteFolderService_GetNoteFolderObjectCommits_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetNoteFolderObjectCommitsReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NoteFolderServiceServer).GetNoteFolderObjectCommits(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/note_service.NoteFolderService/GetNoteFolderObjectCommits",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NoteFolderServiceServer).GetNoteFolderObjectCommits(ctx, req.(*GetNoteFolderObjectCommitsReq))
	}
	return interceptor(ctx, in, info, handler)
}

// NoteFolderService_ServiceDesc is the grpc.ServiceDesc for NoteFolderService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var NoteFolderService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "note_service.NoteFolderService",
	HandlerType: (*NoteFolderServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateNote",
			Handler:    _NoteFolderService_CreateNote_Handler,
		},
		{
			MethodName: "GetListNote",
			Handler:    _NoteFolderService_GetListNote_Handler,
		},
		{
			MethodName: "GetSingleNote",
			Handler:    _NoteFolderService_GetSingleNote_Handler,
		},
		{
			MethodName: "UpdateNote",
			Handler:    _NoteFolderService_UpdateNote_Handler,
		},
		{
			MethodName: "DeleteNote",
			Handler:    _NoteFolderService_DeleteNote_Handler,
		},
		{
			MethodName: "GetNoteObjectCommits",
			Handler:    _NoteFolderService_GetNoteObjectCommits_Handler,
		},
		{
			MethodName: "CreateFolderNote",
			Handler:    _NoteFolderService_CreateFolderNote_Handler,
		},
		{
			MethodName: "GetListFolderNote",
			Handler:    _NoteFolderService_GetListFolderNote_Handler,
		},
		{
			MethodName: "GetSingleFolderNote",
			Handler:    _NoteFolderService_GetSingleFolderNote_Handler,
		},
		{
			MethodName: "UpdateFolderNote",
			Handler:    _NoteFolderService_UpdateFolderNote_Handler,
		},
		{
			MethodName: "DeleteFolderNote",
			Handler:    _NoteFolderService_DeleteFolderNote_Handler,
		},
		{
			MethodName: "GetNoteFolderObjectCommits",
			Handler:    _NoteFolderService_GetNoteFolderObjectCommits_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "note.proto",
}
