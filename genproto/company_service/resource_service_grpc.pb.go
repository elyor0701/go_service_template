// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.17.3
// source: resource_service.proto

package company_service

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// ResourceServiceClient is the client API for ResourceService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ResourceServiceClient interface {
	AddResource(ctx context.Context, in *AddResourceRequest, opts ...grpc.CallOption) (*AddResourceResponse, error)
	ConfigureResource(ctx context.Context, in *ConfigureResourceRequest, opts ...grpc.CallOption) (*ConfigureResourceResponse, error)
	RemoveResource(ctx context.Context, in *RemoveResourceRequest, opts ...grpc.CallOption) (*EmptyProto, error)
	UpdateResource(ctx context.Context, in *UpdateResourceRequest, opts ...grpc.CallOption) (*ResourceWithoutPassword, error)
	GetResource(ctx context.Context, in *GetResourceRequest, opts ...grpc.CallOption) (*ResourceWithoutPassword, error)
	GetResourceList(ctx context.Context, in *GetResourceListRequest, opts ...grpc.CallOption) (*GetResourceListResponse, error)
	CreateResource(ctx context.Context, in *CreateResourceReq, opts ...grpc.CallOption) (*CreateResourceRes, error)
	AddResourceInUcode(ctx context.Context, in *AddResourceInUcodeRequest, opts ...grpc.CallOption) (*AddResourceResponse, error)
	ReconnectResource(ctx context.Context, in *ReconnectResourceRequest, opts ...grpc.CallOption) (*ReconnectResourceRes, error)
	GetResourceWithPath(ctx context.Context, in *GetResourceRequest, opts ...grpc.CallOption) (*GetResourceWithPathResponse, error)
	AutoConnect(ctx context.Context, in *GetProjectsRequest, opts ...grpc.CallOption) (*GetResourceManyWithPathResponse, error)
	GetResourceByResEnvironId(ctx context.Context, in *GetResourceRequest, opts ...grpc.CallOption) (*ResourceWithoutPassword, error)
	GetResEnvByResIdEnvId(ctx context.Context, in *GetResEnvByResIdEnvIdRequest, opts ...grpc.CallOption) (*ResourceEnvironment, error)
	GetResourceById(ctx context.Context, in *GetResourceEnvironmentReq, opts ...grpc.CallOption) (*ResourceEnvironmentWithPassword, error)
	// resource environment
	UpsertResourceEnvironment(ctx context.Context, in *UpsertResourceEnvironmentRequest, opts ...grpc.CallOption) (*UpsertResourceEnvironmentResponse, error)
	GetResourceEnvironment(ctx context.Context, in *GetResourceEnvironmentReq, opts ...grpc.CallOption) (*ResourceEnvironment, error)
	GetDefaultResourceEnvironment(ctx context.Context, in *GetDefaultResourceEnvironmentReq, opts ...grpc.CallOption) (*ResourceEnvironment, error)
	GetListResourceEnvironment(ctx context.Context, in *GetListResourceEnvironmentReq, opts ...grpc.CallOption) (*GetListResourceEnvironmentRes, error)
	GetListConfiguredResourceEnvironment(ctx context.Context, in *GetListConfiguredResourceEnvironmentReq, opts ...grpc.CallOption) (*GetListConfiguredResourceEnvironmentRes, error)
	GetResourceByEnvID(ctx context.Context, in *GetResourceByEnvIDRequest, opts ...grpc.CallOption) (*GetResourceByEnvIDResponse, error)
	GetServiceResources(ctx context.Context, in *GetServiceResourcesReq, opts ...grpc.CallOption) (*GetServiceResourcesRes, error)
	SetDefaultResource(ctx context.Context, in *SetDefaultResourceReq, opts ...grpc.CallOption) (*SetDefaultResourceRes, error)
}

type resourceServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewResourceServiceClient(cc grpc.ClientConnInterface) ResourceServiceClient {
	return &resourceServiceClient{cc}
}

func (c *resourceServiceClient) AddResource(ctx context.Context, in *AddResourceRequest, opts ...grpc.CallOption) (*AddResourceResponse, error) {
	out := new(AddResourceResponse)
	err := c.cc.Invoke(ctx, "/company_service.ResourceService/AddResource", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *resourceServiceClient) ConfigureResource(ctx context.Context, in *ConfigureResourceRequest, opts ...grpc.CallOption) (*ConfigureResourceResponse, error) {
	out := new(ConfigureResourceResponse)
	err := c.cc.Invoke(ctx, "/company_service.ResourceService/ConfigureResource", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *resourceServiceClient) RemoveResource(ctx context.Context, in *RemoveResourceRequest, opts ...grpc.CallOption) (*EmptyProto, error) {
	out := new(EmptyProto)
	err := c.cc.Invoke(ctx, "/company_service.ResourceService/RemoveResource", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *resourceServiceClient) UpdateResource(ctx context.Context, in *UpdateResourceRequest, opts ...grpc.CallOption) (*ResourceWithoutPassword, error) {
	out := new(ResourceWithoutPassword)
	err := c.cc.Invoke(ctx, "/company_service.ResourceService/UpdateResource", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *resourceServiceClient) GetResource(ctx context.Context, in *GetResourceRequest, opts ...grpc.CallOption) (*ResourceWithoutPassword, error) {
	out := new(ResourceWithoutPassword)
	err := c.cc.Invoke(ctx, "/company_service.ResourceService/GetResource", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *resourceServiceClient) GetResourceList(ctx context.Context, in *GetResourceListRequest, opts ...grpc.CallOption) (*GetResourceListResponse, error) {
	out := new(GetResourceListResponse)
	err := c.cc.Invoke(ctx, "/company_service.ResourceService/GetResourceList", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *resourceServiceClient) CreateResource(ctx context.Context, in *CreateResourceReq, opts ...grpc.CallOption) (*CreateResourceRes, error) {
	out := new(CreateResourceRes)
	err := c.cc.Invoke(ctx, "/company_service.ResourceService/CreateResource", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *resourceServiceClient) AddResourceInUcode(ctx context.Context, in *AddResourceInUcodeRequest, opts ...grpc.CallOption) (*AddResourceResponse, error) {
	out := new(AddResourceResponse)
	err := c.cc.Invoke(ctx, "/company_service.ResourceService/AddResourceInUcode", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *resourceServiceClient) ReconnectResource(ctx context.Context, in *ReconnectResourceRequest, opts ...grpc.CallOption) (*ReconnectResourceRes, error) {
	out := new(ReconnectResourceRes)
	err := c.cc.Invoke(ctx, "/company_service.ResourceService/ReconnectResource", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *resourceServiceClient) GetResourceWithPath(ctx context.Context, in *GetResourceRequest, opts ...grpc.CallOption) (*GetResourceWithPathResponse, error) {
	out := new(GetResourceWithPathResponse)
	err := c.cc.Invoke(ctx, "/company_service.ResourceService/GetResourceWithPath", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *resourceServiceClient) AutoConnect(ctx context.Context, in *GetProjectsRequest, opts ...grpc.CallOption) (*GetResourceManyWithPathResponse, error) {
	out := new(GetResourceManyWithPathResponse)
	err := c.cc.Invoke(ctx, "/company_service.ResourceService/AutoConnect", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *resourceServiceClient) GetResourceByResEnvironId(ctx context.Context, in *GetResourceRequest, opts ...grpc.CallOption) (*ResourceWithoutPassword, error) {
	out := new(ResourceWithoutPassword)
	err := c.cc.Invoke(ctx, "/company_service.ResourceService/GetResourceByResEnvironId", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *resourceServiceClient) GetResEnvByResIdEnvId(ctx context.Context, in *GetResEnvByResIdEnvIdRequest, opts ...grpc.CallOption) (*ResourceEnvironment, error) {
	out := new(ResourceEnvironment)
	err := c.cc.Invoke(ctx, "/company_service.ResourceService/GetResEnvByResIdEnvId", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *resourceServiceClient) GetResourceById(ctx context.Context, in *GetResourceEnvironmentReq, opts ...grpc.CallOption) (*ResourceEnvironmentWithPassword, error) {
	out := new(ResourceEnvironmentWithPassword)
	err := c.cc.Invoke(ctx, "/company_service.ResourceService/GetResourceById", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *resourceServiceClient) UpsertResourceEnvironment(ctx context.Context, in *UpsertResourceEnvironmentRequest, opts ...grpc.CallOption) (*UpsertResourceEnvironmentResponse, error) {
	out := new(UpsertResourceEnvironmentResponse)
	err := c.cc.Invoke(ctx, "/company_service.ResourceService/UpsertResourceEnvironment", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *resourceServiceClient) GetResourceEnvironment(ctx context.Context, in *GetResourceEnvironmentReq, opts ...grpc.CallOption) (*ResourceEnvironment, error) {
	out := new(ResourceEnvironment)
	err := c.cc.Invoke(ctx, "/company_service.ResourceService/GetResourceEnvironment", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *resourceServiceClient) GetDefaultResourceEnvironment(ctx context.Context, in *GetDefaultResourceEnvironmentReq, opts ...grpc.CallOption) (*ResourceEnvironment, error) {
	out := new(ResourceEnvironment)
	err := c.cc.Invoke(ctx, "/company_service.ResourceService/GetDefaultResourceEnvironment", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *resourceServiceClient) GetListResourceEnvironment(ctx context.Context, in *GetListResourceEnvironmentReq, opts ...grpc.CallOption) (*GetListResourceEnvironmentRes, error) {
	out := new(GetListResourceEnvironmentRes)
	err := c.cc.Invoke(ctx, "/company_service.ResourceService/GetListResourceEnvironment", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *resourceServiceClient) GetListConfiguredResourceEnvironment(ctx context.Context, in *GetListConfiguredResourceEnvironmentReq, opts ...grpc.CallOption) (*GetListConfiguredResourceEnvironmentRes, error) {
	out := new(GetListConfiguredResourceEnvironmentRes)
	err := c.cc.Invoke(ctx, "/company_service.ResourceService/GetListConfiguredResourceEnvironment", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *resourceServiceClient) GetResourceByEnvID(ctx context.Context, in *GetResourceByEnvIDRequest, opts ...grpc.CallOption) (*GetResourceByEnvIDResponse, error) {
	out := new(GetResourceByEnvIDResponse)
	err := c.cc.Invoke(ctx, "/company_service.ResourceService/GetResourceByEnvID", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *resourceServiceClient) GetServiceResources(ctx context.Context, in *GetServiceResourcesReq, opts ...grpc.CallOption) (*GetServiceResourcesRes, error) {
	out := new(GetServiceResourcesRes)
	err := c.cc.Invoke(ctx, "/company_service.ResourceService/GetServiceResources", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *resourceServiceClient) SetDefaultResource(ctx context.Context, in *SetDefaultResourceReq, opts ...grpc.CallOption) (*SetDefaultResourceRes, error) {
	out := new(SetDefaultResourceRes)
	err := c.cc.Invoke(ctx, "/company_service.ResourceService/SetDefaultResource", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ResourceServiceServer is the server API for ResourceService service.
// All implementations must embed UnimplementedResourceServiceServer
// for forward compatibility
type ResourceServiceServer interface {
	AddResource(context.Context, *AddResourceRequest) (*AddResourceResponse, error)
	ConfigureResource(context.Context, *ConfigureResourceRequest) (*ConfigureResourceResponse, error)
	RemoveResource(context.Context, *RemoveResourceRequest) (*EmptyProto, error)
	UpdateResource(context.Context, *UpdateResourceRequest) (*ResourceWithoutPassword, error)
	GetResource(context.Context, *GetResourceRequest) (*ResourceWithoutPassword, error)
	GetResourceList(context.Context, *GetResourceListRequest) (*GetResourceListResponse, error)
	CreateResource(context.Context, *CreateResourceReq) (*CreateResourceRes, error)
	AddResourceInUcode(context.Context, *AddResourceInUcodeRequest) (*AddResourceResponse, error)
	ReconnectResource(context.Context, *ReconnectResourceRequest) (*ReconnectResourceRes, error)
	GetResourceWithPath(context.Context, *GetResourceRequest) (*GetResourceWithPathResponse, error)
	AutoConnect(context.Context, *GetProjectsRequest) (*GetResourceManyWithPathResponse, error)
	GetResourceByResEnvironId(context.Context, *GetResourceRequest) (*ResourceWithoutPassword, error)
	GetResEnvByResIdEnvId(context.Context, *GetResEnvByResIdEnvIdRequest) (*ResourceEnvironment, error)
	GetResourceById(context.Context, *GetResourceEnvironmentReq) (*ResourceEnvironmentWithPassword, error)
	// resource environment
	UpsertResourceEnvironment(context.Context, *UpsertResourceEnvironmentRequest) (*UpsertResourceEnvironmentResponse, error)
	GetResourceEnvironment(context.Context, *GetResourceEnvironmentReq) (*ResourceEnvironment, error)
	GetDefaultResourceEnvironment(context.Context, *GetDefaultResourceEnvironmentReq) (*ResourceEnvironment, error)
	GetListResourceEnvironment(context.Context, *GetListResourceEnvironmentReq) (*GetListResourceEnvironmentRes, error)
	GetListConfiguredResourceEnvironment(context.Context, *GetListConfiguredResourceEnvironmentReq) (*GetListConfiguredResourceEnvironmentRes, error)
	GetResourceByEnvID(context.Context, *GetResourceByEnvIDRequest) (*GetResourceByEnvIDResponse, error)
	GetServiceResources(context.Context, *GetServiceResourcesReq) (*GetServiceResourcesRes, error)
	SetDefaultResource(context.Context, *SetDefaultResourceReq) (*SetDefaultResourceRes, error)
	mustEmbedUnimplementedResourceServiceServer()
}

// UnimplementedResourceServiceServer must be embedded to have forward compatible implementations.
type UnimplementedResourceServiceServer struct {
}

func (UnimplementedResourceServiceServer) AddResource(context.Context, *AddResourceRequest) (*AddResourceResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddResource not implemented")
}
func (UnimplementedResourceServiceServer) ConfigureResource(context.Context, *ConfigureResourceRequest) (*ConfigureResourceResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ConfigureResource not implemented")
}
func (UnimplementedResourceServiceServer) RemoveResource(context.Context, *RemoveResourceRequest) (*EmptyProto, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RemoveResource not implemented")
}
func (UnimplementedResourceServiceServer) UpdateResource(context.Context, *UpdateResourceRequest) (*ResourceWithoutPassword, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateResource not implemented")
}
func (UnimplementedResourceServiceServer) GetResource(context.Context, *GetResourceRequest) (*ResourceWithoutPassword, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetResource not implemented")
}
func (UnimplementedResourceServiceServer) GetResourceList(context.Context, *GetResourceListRequest) (*GetResourceListResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetResourceList not implemented")
}
func (UnimplementedResourceServiceServer) CreateResource(context.Context, *CreateResourceReq) (*CreateResourceRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateResource not implemented")
}
func (UnimplementedResourceServiceServer) AddResourceInUcode(context.Context, *AddResourceInUcodeRequest) (*AddResourceResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddResourceInUcode not implemented")
}
func (UnimplementedResourceServiceServer) ReconnectResource(context.Context, *ReconnectResourceRequest) (*ReconnectResourceRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ReconnectResource not implemented")
}
func (UnimplementedResourceServiceServer) GetResourceWithPath(context.Context, *GetResourceRequest) (*GetResourceWithPathResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetResourceWithPath not implemented")
}
func (UnimplementedResourceServiceServer) AutoConnect(context.Context, *GetProjectsRequest) (*GetResourceManyWithPathResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AutoConnect not implemented")
}
func (UnimplementedResourceServiceServer) GetResourceByResEnvironId(context.Context, *GetResourceRequest) (*ResourceWithoutPassword, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetResourceByResEnvironId not implemented")
}
func (UnimplementedResourceServiceServer) GetResEnvByResIdEnvId(context.Context, *GetResEnvByResIdEnvIdRequest) (*ResourceEnvironment, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetResEnvByResIdEnvId not implemented")
}
func (UnimplementedResourceServiceServer) GetResourceById(context.Context, *GetResourceEnvironmentReq) (*ResourceEnvironmentWithPassword, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetResourceById not implemented")
}
func (UnimplementedResourceServiceServer) UpsertResourceEnvironment(context.Context, *UpsertResourceEnvironmentRequest) (*UpsertResourceEnvironmentResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpsertResourceEnvironment not implemented")
}
func (UnimplementedResourceServiceServer) GetResourceEnvironment(context.Context, *GetResourceEnvironmentReq) (*ResourceEnvironment, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetResourceEnvironment not implemented")
}
func (UnimplementedResourceServiceServer) GetDefaultResourceEnvironment(context.Context, *GetDefaultResourceEnvironmentReq) (*ResourceEnvironment, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetDefaultResourceEnvironment not implemented")
}
func (UnimplementedResourceServiceServer) GetListResourceEnvironment(context.Context, *GetListResourceEnvironmentReq) (*GetListResourceEnvironmentRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetListResourceEnvironment not implemented")
}
func (UnimplementedResourceServiceServer) GetListConfiguredResourceEnvironment(context.Context, *GetListConfiguredResourceEnvironmentReq) (*GetListConfiguredResourceEnvironmentRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetListConfiguredResourceEnvironment not implemented")
}
func (UnimplementedResourceServiceServer) GetResourceByEnvID(context.Context, *GetResourceByEnvIDRequest) (*GetResourceByEnvIDResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetResourceByEnvID not implemented")
}
func (UnimplementedResourceServiceServer) GetServiceResources(context.Context, *GetServiceResourcesReq) (*GetServiceResourcesRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetServiceResources not implemented")
}
func (UnimplementedResourceServiceServer) SetDefaultResource(context.Context, *SetDefaultResourceReq) (*SetDefaultResourceRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetDefaultResource not implemented")
}
func (UnimplementedResourceServiceServer) mustEmbedUnimplementedResourceServiceServer() {}

// UnsafeResourceServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ResourceServiceServer will
// result in compilation errors.
type UnsafeResourceServiceServer interface {
	mustEmbedUnimplementedResourceServiceServer()
}

func RegisterResourceServiceServer(s grpc.ServiceRegistrar, srv ResourceServiceServer) {
	s.RegisterService(&ResourceService_ServiceDesc, srv)
}

func _ResourceService_AddResource_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddResourceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ResourceServiceServer).AddResource(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/company_service.ResourceService/AddResource",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ResourceServiceServer).AddResource(ctx, req.(*AddResourceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ResourceService_ConfigureResource_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ConfigureResourceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ResourceServiceServer).ConfigureResource(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/company_service.ResourceService/ConfigureResource",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ResourceServiceServer).ConfigureResource(ctx, req.(*ConfigureResourceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ResourceService_RemoveResource_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RemoveResourceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ResourceServiceServer).RemoveResource(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/company_service.ResourceService/RemoveResource",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ResourceServiceServer).RemoveResource(ctx, req.(*RemoveResourceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ResourceService_UpdateResource_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateResourceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ResourceServiceServer).UpdateResource(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/company_service.ResourceService/UpdateResource",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ResourceServiceServer).UpdateResource(ctx, req.(*UpdateResourceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ResourceService_GetResource_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetResourceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ResourceServiceServer).GetResource(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/company_service.ResourceService/GetResource",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ResourceServiceServer).GetResource(ctx, req.(*GetResourceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ResourceService_GetResourceList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetResourceListRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ResourceServiceServer).GetResourceList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/company_service.ResourceService/GetResourceList",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ResourceServiceServer).GetResourceList(ctx, req.(*GetResourceListRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ResourceService_CreateResource_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateResourceReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ResourceServiceServer).CreateResource(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/company_service.ResourceService/CreateResource",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ResourceServiceServer).CreateResource(ctx, req.(*CreateResourceReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _ResourceService_AddResourceInUcode_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddResourceInUcodeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ResourceServiceServer).AddResourceInUcode(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/company_service.ResourceService/AddResourceInUcode",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ResourceServiceServer).AddResourceInUcode(ctx, req.(*AddResourceInUcodeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ResourceService_ReconnectResource_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReconnectResourceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ResourceServiceServer).ReconnectResource(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/company_service.ResourceService/ReconnectResource",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ResourceServiceServer).ReconnectResource(ctx, req.(*ReconnectResourceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ResourceService_GetResourceWithPath_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetResourceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ResourceServiceServer).GetResourceWithPath(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/company_service.ResourceService/GetResourceWithPath",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ResourceServiceServer).GetResourceWithPath(ctx, req.(*GetResourceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ResourceService_AutoConnect_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetProjectsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ResourceServiceServer).AutoConnect(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/company_service.ResourceService/AutoConnect",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ResourceServiceServer).AutoConnect(ctx, req.(*GetProjectsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ResourceService_GetResourceByResEnvironId_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetResourceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ResourceServiceServer).GetResourceByResEnvironId(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/company_service.ResourceService/GetResourceByResEnvironId",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ResourceServiceServer).GetResourceByResEnvironId(ctx, req.(*GetResourceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ResourceService_GetResEnvByResIdEnvId_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetResEnvByResIdEnvIdRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ResourceServiceServer).GetResEnvByResIdEnvId(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/company_service.ResourceService/GetResEnvByResIdEnvId",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ResourceServiceServer).GetResEnvByResIdEnvId(ctx, req.(*GetResEnvByResIdEnvIdRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ResourceService_GetResourceById_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetResourceEnvironmentReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ResourceServiceServer).GetResourceById(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/company_service.ResourceService/GetResourceById",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ResourceServiceServer).GetResourceById(ctx, req.(*GetResourceEnvironmentReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _ResourceService_UpsertResourceEnvironment_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpsertResourceEnvironmentRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ResourceServiceServer).UpsertResourceEnvironment(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/company_service.ResourceService/UpsertResourceEnvironment",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ResourceServiceServer).UpsertResourceEnvironment(ctx, req.(*UpsertResourceEnvironmentRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ResourceService_GetResourceEnvironment_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetResourceEnvironmentReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ResourceServiceServer).GetResourceEnvironment(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/company_service.ResourceService/GetResourceEnvironment",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ResourceServiceServer).GetResourceEnvironment(ctx, req.(*GetResourceEnvironmentReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _ResourceService_GetDefaultResourceEnvironment_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetDefaultResourceEnvironmentReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ResourceServiceServer).GetDefaultResourceEnvironment(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/company_service.ResourceService/GetDefaultResourceEnvironment",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ResourceServiceServer).GetDefaultResourceEnvironment(ctx, req.(*GetDefaultResourceEnvironmentReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _ResourceService_GetListResourceEnvironment_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetListResourceEnvironmentReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ResourceServiceServer).GetListResourceEnvironment(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/company_service.ResourceService/GetListResourceEnvironment",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ResourceServiceServer).GetListResourceEnvironment(ctx, req.(*GetListResourceEnvironmentReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _ResourceService_GetListConfiguredResourceEnvironment_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetListConfiguredResourceEnvironmentReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ResourceServiceServer).GetListConfiguredResourceEnvironment(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/company_service.ResourceService/GetListConfiguredResourceEnvironment",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ResourceServiceServer).GetListConfiguredResourceEnvironment(ctx, req.(*GetListConfiguredResourceEnvironmentReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _ResourceService_GetResourceByEnvID_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetResourceByEnvIDRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ResourceServiceServer).GetResourceByEnvID(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/company_service.ResourceService/GetResourceByEnvID",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ResourceServiceServer).GetResourceByEnvID(ctx, req.(*GetResourceByEnvIDRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ResourceService_GetServiceResources_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetServiceResourcesReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ResourceServiceServer).GetServiceResources(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/company_service.ResourceService/GetServiceResources",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ResourceServiceServer).GetServiceResources(ctx, req.(*GetServiceResourcesReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _ResourceService_SetDefaultResource_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SetDefaultResourceReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ResourceServiceServer).SetDefaultResource(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/company_service.ResourceService/SetDefaultResource",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ResourceServiceServer).SetDefaultResource(ctx, req.(*SetDefaultResourceReq))
	}
	return interceptor(ctx, in, info, handler)
}

// ResourceService_ServiceDesc is the grpc.ServiceDesc for ResourceService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var ResourceService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "company_service.ResourceService",
	HandlerType: (*ResourceServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "AddResource",
			Handler:    _ResourceService_AddResource_Handler,
		},
		{
			MethodName: "ConfigureResource",
			Handler:    _ResourceService_ConfigureResource_Handler,
		},
		{
			MethodName: "RemoveResource",
			Handler:    _ResourceService_RemoveResource_Handler,
		},
		{
			MethodName: "UpdateResource",
			Handler:    _ResourceService_UpdateResource_Handler,
		},
		{
			MethodName: "GetResource",
			Handler:    _ResourceService_GetResource_Handler,
		},
		{
			MethodName: "GetResourceList",
			Handler:    _ResourceService_GetResourceList_Handler,
		},
		{
			MethodName: "CreateResource",
			Handler:    _ResourceService_CreateResource_Handler,
		},
		{
			MethodName: "AddResourceInUcode",
			Handler:    _ResourceService_AddResourceInUcode_Handler,
		},
		{
			MethodName: "ReconnectResource",
			Handler:    _ResourceService_ReconnectResource_Handler,
		},
		{
			MethodName: "GetResourceWithPath",
			Handler:    _ResourceService_GetResourceWithPath_Handler,
		},
		{
			MethodName: "AutoConnect",
			Handler:    _ResourceService_AutoConnect_Handler,
		},
		{
			MethodName: "GetResourceByResEnvironId",
			Handler:    _ResourceService_GetResourceByResEnvironId_Handler,
		},
		{
			MethodName: "GetResEnvByResIdEnvId",
			Handler:    _ResourceService_GetResEnvByResIdEnvId_Handler,
		},
		{
			MethodName: "GetResourceById",
			Handler:    _ResourceService_GetResourceById_Handler,
		},
		{
			MethodName: "UpsertResourceEnvironment",
			Handler:    _ResourceService_UpsertResourceEnvironment_Handler,
		},
		{
			MethodName: "GetResourceEnvironment",
			Handler:    _ResourceService_GetResourceEnvironment_Handler,
		},
		{
			MethodName: "GetDefaultResourceEnvironment",
			Handler:    _ResourceService_GetDefaultResourceEnvironment_Handler,
		},
		{
			MethodName: "GetListResourceEnvironment",
			Handler:    _ResourceService_GetListResourceEnvironment_Handler,
		},
		{
			MethodName: "GetListConfiguredResourceEnvironment",
			Handler:    _ResourceService_GetListConfiguredResourceEnvironment_Handler,
		},
		{
			MethodName: "GetResourceByEnvID",
			Handler:    _ResourceService_GetResourceByEnvID_Handler,
		},
		{
			MethodName: "GetServiceResources",
			Handler:    _ResourceService_GetServiceResources_Handler,
		},
		{
			MethodName: "SetDefaultResource",
			Handler:    _ResourceService_SetDefaultResource_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "resource_service.proto",
}
