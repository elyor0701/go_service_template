// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.17.3
// source: service_resource.proto

package company_service

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// MicroserviceResourceClient is the client API for MicroserviceResource service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type MicroserviceResourceClient interface {
	GetList(ctx context.Context, in *GetListServiceResourceReq, opts ...grpc.CallOption) (*GetListServiceResourceRes, error)
	Update(ctx context.Context, in *UpdateServiceResourceReq, opts ...grpc.CallOption) (*UpdateServiceResourceRes, error)
	GetSingle(ctx context.Context, in *GetSingleServiceResourceReq, opts ...grpc.CallOption) (*ServiceResourceModel, error)
}

type microserviceResourceClient struct {
	cc grpc.ClientConnInterface
}

func NewMicroserviceResourceClient(cc grpc.ClientConnInterface) MicroserviceResourceClient {
	return &microserviceResourceClient{cc}
}

func (c *microserviceResourceClient) GetList(ctx context.Context, in *GetListServiceResourceReq, opts ...grpc.CallOption) (*GetListServiceResourceRes, error) {
	out := new(GetListServiceResourceRes)
	err := c.cc.Invoke(ctx, "/company_service.MicroserviceResource/GetList", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *microserviceResourceClient) Update(ctx context.Context, in *UpdateServiceResourceReq, opts ...grpc.CallOption) (*UpdateServiceResourceRes, error) {
	out := new(UpdateServiceResourceRes)
	err := c.cc.Invoke(ctx, "/company_service.MicroserviceResource/Update", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *microserviceResourceClient) GetSingle(ctx context.Context, in *GetSingleServiceResourceReq, opts ...grpc.CallOption) (*ServiceResourceModel, error) {
	out := new(ServiceResourceModel)
	err := c.cc.Invoke(ctx, "/company_service.MicroserviceResource/GetSingle", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// MicroserviceResourceServer is the server API for MicroserviceResource service.
// All implementations must embed UnimplementedMicroserviceResourceServer
// for forward compatibility
type MicroserviceResourceServer interface {
	GetList(context.Context, *GetListServiceResourceReq) (*GetListServiceResourceRes, error)
	Update(context.Context, *UpdateServiceResourceReq) (*UpdateServiceResourceRes, error)
	GetSingle(context.Context, *GetSingleServiceResourceReq) (*ServiceResourceModel, error)
	mustEmbedUnimplementedMicroserviceResourceServer()
}

// UnimplementedMicroserviceResourceServer must be embedded to have forward compatible implementations.
type UnimplementedMicroserviceResourceServer struct {
}

func (UnimplementedMicroserviceResourceServer) GetList(context.Context, *GetListServiceResourceReq) (*GetListServiceResourceRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetList not implemented")
}
func (UnimplementedMicroserviceResourceServer) Update(context.Context, *UpdateServiceResourceReq) (*UpdateServiceResourceRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Update not implemented")
}
func (UnimplementedMicroserviceResourceServer) GetSingle(context.Context, *GetSingleServiceResourceReq) (*ServiceResourceModel, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetSingle not implemented")
}
func (UnimplementedMicroserviceResourceServer) mustEmbedUnimplementedMicroserviceResourceServer() {}

// UnsafeMicroserviceResourceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to MicroserviceResourceServer will
// result in compilation errors.
type UnsafeMicroserviceResourceServer interface {
	mustEmbedUnimplementedMicroserviceResourceServer()
}

func RegisterMicroserviceResourceServer(s grpc.ServiceRegistrar, srv MicroserviceResourceServer) {
	s.RegisterService(&MicroserviceResource_ServiceDesc, srv)
}

func _MicroserviceResource_GetList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetListServiceResourceReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MicroserviceResourceServer).GetList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/company_service.MicroserviceResource/GetList",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MicroserviceResourceServer).GetList(ctx, req.(*GetListServiceResourceReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _MicroserviceResource_Update_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateServiceResourceReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MicroserviceResourceServer).Update(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/company_service.MicroserviceResource/Update",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MicroserviceResourceServer).Update(ctx, req.(*UpdateServiceResourceReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _MicroserviceResource_GetSingle_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetSingleServiceResourceReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MicroserviceResourceServer).GetSingle(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/company_service.MicroserviceResource/GetSingle",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MicroserviceResourceServer).GetSingle(ctx, req.(*GetSingleServiceResourceReq))
	}
	return interceptor(ctx, in, info, handler)
}

// MicroserviceResource_ServiceDesc is the grpc.ServiceDesc for MicroserviceResource service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var MicroserviceResource_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "company_service.MicroserviceResource",
	HandlerType: (*MicroserviceResourceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetList",
			Handler:    _MicroserviceResource_GetList_Handler,
		},
		{
			MethodName: "Update",
			Handler:    _MicroserviceResource_Update_Handler,
		},
		{
			MethodName: "GetSingle",
			Handler:    _MicroserviceResource_GetSingle_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "service_resource.proto",
}
