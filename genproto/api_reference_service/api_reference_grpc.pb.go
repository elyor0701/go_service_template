// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.17.3
// source: api_reference.proto

package api_reference_service

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// ApiReferenceServiceClient is the client API for ApiReferenceService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ApiReferenceServiceClient interface {
	Create(ctx context.Context, in *CreateApiReferenceRequest, opts ...grpc.CallOption) (*ApiReference, error)
	Update(ctx context.Context, in *ApiReference, opts ...grpc.CallOption) (*ApiReference, error)
	Get(ctx context.Context, in *GetApiReferenceRequest, opts ...grpc.CallOption) (*ApiReference, error)
	GetList(ctx context.Context, in *GetListApiReferenceRequest, opts ...grpc.CallOption) (*GetListApiReferenceResponse, error)
	Delete(ctx context.Context, in *DeleteApiReferenceRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	GetApiReferenceChanges(ctx context.Context, in *GetListApiReferenceChangesRequest, opts ...grpc.CallOption) (*GetListApiReferenceChangesResponse, error)
	RevertApiReference(ctx context.Context, in *RevertApiReferenceRequest, opts ...grpc.CallOption) (*ApiReference, error)
	CreateManyApiReference(ctx context.Context, in *ManyVersions, opts ...grpc.CallOption) (*emptypb.Empty, error)
}

type apiReferenceServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewApiReferenceServiceClient(cc grpc.ClientConnInterface) ApiReferenceServiceClient {
	return &apiReferenceServiceClient{cc}
}

func (c *apiReferenceServiceClient) Create(ctx context.Context, in *CreateApiReferenceRequest, opts ...grpc.CallOption) (*ApiReference, error) {
	out := new(ApiReference)
	err := c.cc.Invoke(ctx, "/api_reference_service.ApiReferenceService/Create", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *apiReferenceServiceClient) Update(ctx context.Context, in *ApiReference, opts ...grpc.CallOption) (*ApiReference, error) {
	out := new(ApiReference)
	err := c.cc.Invoke(ctx, "/api_reference_service.ApiReferenceService/Update", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *apiReferenceServiceClient) Get(ctx context.Context, in *GetApiReferenceRequest, opts ...grpc.CallOption) (*ApiReference, error) {
	out := new(ApiReference)
	err := c.cc.Invoke(ctx, "/api_reference_service.ApiReferenceService/Get", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *apiReferenceServiceClient) GetList(ctx context.Context, in *GetListApiReferenceRequest, opts ...grpc.CallOption) (*GetListApiReferenceResponse, error) {
	out := new(GetListApiReferenceResponse)
	err := c.cc.Invoke(ctx, "/api_reference_service.ApiReferenceService/GetList", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *apiReferenceServiceClient) Delete(ctx context.Context, in *DeleteApiReferenceRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/api_reference_service.ApiReferenceService/Delete", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *apiReferenceServiceClient) GetApiReferenceChanges(ctx context.Context, in *GetListApiReferenceChangesRequest, opts ...grpc.CallOption) (*GetListApiReferenceChangesResponse, error) {
	out := new(GetListApiReferenceChangesResponse)
	err := c.cc.Invoke(ctx, "/api_reference_service.ApiReferenceService/GetApiReferenceChanges", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *apiReferenceServiceClient) RevertApiReference(ctx context.Context, in *RevertApiReferenceRequest, opts ...grpc.CallOption) (*ApiReference, error) {
	out := new(ApiReference)
	err := c.cc.Invoke(ctx, "/api_reference_service.ApiReferenceService/RevertApiReference", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *apiReferenceServiceClient) CreateManyApiReference(ctx context.Context, in *ManyVersions, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/api_reference_service.ApiReferenceService/CreateManyApiReference", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ApiReferenceServiceServer is the server API for ApiReferenceService service.
// All implementations must embed UnimplementedApiReferenceServiceServer
// for forward compatibility
type ApiReferenceServiceServer interface {
	Create(context.Context, *CreateApiReferenceRequest) (*ApiReference, error)
	Update(context.Context, *ApiReference) (*ApiReference, error)
	Get(context.Context, *GetApiReferenceRequest) (*ApiReference, error)
	GetList(context.Context, *GetListApiReferenceRequest) (*GetListApiReferenceResponse, error)
	Delete(context.Context, *DeleteApiReferenceRequest) (*emptypb.Empty, error)
	GetApiReferenceChanges(context.Context, *GetListApiReferenceChangesRequest) (*GetListApiReferenceChangesResponse, error)
	RevertApiReference(context.Context, *RevertApiReferenceRequest) (*ApiReference, error)
	CreateManyApiReference(context.Context, *ManyVersions) (*emptypb.Empty, error)
	mustEmbedUnimplementedApiReferenceServiceServer()
}

// UnimplementedApiReferenceServiceServer must be embedded to have forward compatible implementations.
type UnimplementedApiReferenceServiceServer struct {
}

func (UnimplementedApiReferenceServiceServer) Create(context.Context, *CreateApiReferenceRequest) (*ApiReference, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Create not implemented")
}
func (UnimplementedApiReferenceServiceServer) Update(context.Context, *ApiReference) (*ApiReference, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Update not implemented")
}
func (UnimplementedApiReferenceServiceServer) Get(context.Context, *GetApiReferenceRequest) (*ApiReference, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Get not implemented")
}
func (UnimplementedApiReferenceServiceServer) GetList(context.Context, *GetListApiReferenceRequest) (*GetListApiReferenceResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetList not implemented")
}
func (UnimplementedApiReferenceServiceServer) Delete(context.Context, *DeleteApiReferenceRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Delete not implemented")
}
func (UnimplementedApiReferenceServiceServer) GetApiReferenceChanges(context.Context, *GetListApiReferenceChangesRequest) (*GetListApiReferenceChangesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetApiReferenceChanges not implemented")
}
func (UnimplementedApiReferenceServiceServer) RevertApiReference(context.Context, *RevertApiReferenceRequest) (*ApiReference, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RevertApiReference not implemented")
}
func (UnimplementedApiReferenceServiceServer) CreateManyApiReference(context.Context, *ManyVersions) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateManyApiReference not implemented")
}
func (UnimplementedApiReferenceServiceServer) mustEmbedUnimplementedApiReferenceServiceServer() {}

// UnsafeApiReferenceServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ApiReferenceServiceServer will
// result in compilation errors.
type UnsafeApiReferenceServiceServer interface {
	mustEmbedUnimplementedApiReferenceServiceServer()
}

func RegisterApiReferenceServiceServer(s grpc.ServiceRegistrar, srv ApiReferenceServiceServer) {
	s.RegisterService(&ApiReferenceService_ServiceDesc, srv)
}

func _ApiReferenceService_Create_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateApiReferenceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ApiReferenceServiceServer).Create(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api_reference_service.ApiReferenceService/Create",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ApiReferenceServiceServer).Create(ctx, req.(*CreateApiReferenceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ApiReferenceService_Update_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ApiReference)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ApiReferenceServiceServer).Update(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api_reference_service.ApiReferenceService/Update",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ApiReferenceServiceServer).Update(ctx, req.(*ApiReference))
	}
	return interceptor(ctx, in, info, handler)
}

func _ApiReferenceService_Get_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetApiReferenceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ApiReferenceServiceServer).Get(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api_reference_service.ApiReferenceService/Get",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ApiReferenceServiceServer).Get(ctx, req.(*GetApiReferenceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ApiReferenceService_GetList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetListApiReferenceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ApiReferenceServiceServer).GetList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api_reference_service.ApiReferenceService/GetList",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ApiReferenceServiceServer).GetList(ctx, req.(*GetListApiReferenceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ApiReferenceService_Delete_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteApiReferenceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ApiReferenceServiceServer).Delete(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api_reference_service.ApiReferenceService/Delete",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ApiReferenceServiceServer).Delete(ctx, req.(*DeleteApiReferenceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ApiReferenceService_GetApiReferenceChanges_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetListApiReferenceChangesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ApiReferenceServiceServer).GetApiReferenceChanges(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api_reference_service.ApiReferenceService/GetApiReferenceChanges",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ApiReferenceServiceServer).GetApiReferenceChanges(ctx, req.(*GetListApiReferenceChangesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ApiReferenceService_RevertApiReference_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RevertApiReferenceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ApiReferenceServiceServer).RevertApiReference(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api_reference_service.ApiReferenceService/RevertApiReference",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ApiReferenceServiceServer).RevertApiReference(ctx, req.(*RevertApiReferenceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ApiReferenceService_CreateManyApiReference_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ManyVersions)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ApiReferenceServiceServer).CreateManyApiReference(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api_reference_service.ApiReferenceService/CreateManyApiReference",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ApiReferenceServiceServer).CreateManyApiReference(ctx, req.(*ManyVersions))
	}
	return interceptor(ctx, in, info, handler)
}

// ApiReferenceService_ServiceDesc is the grpc.ServiceDesc for ApiReferenceService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var ApiReferenceService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "api_reference_service.ApiReferenceService",
	HandlerType: (*ApiReferenceServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Create",
			Handler:    _ApiReferenceService_Create_Handler,
		},
		{
			MethodName: "Update",
			Handler:    _ApiReferenceService_Update_Handler,
		},
		{
			MethodName: "Get",
			Handler:    _ApiReferenceService_Get_Handler,
		},
		{
			MethodName: "GetList",
			Handler:    _ApiReferenceService_GetList_Handler,
		},
		{
			MethodName: "Delete",
			Handler:    _ApiReferenceService_Delete_Handler,
		},
		{
			MethodName: "GetApiReferenceChanges",
			Handler:    _ApiReferenceService_GetApiReferenceChanges_Handler,
		},
		{
			MethodName: "RevertApiReference",
			Handler:    _ApiReferenceService_RevertApiReference_Handler,
		},
		{
			MethodName: "CreateManyApiReference",
			Handler:    _ApiReferenceService_CreateManyApiReference_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "api_reference.proto",
}
