// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.17.3
// source: template.proto

package template_service

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// TemplateFolderServiceClient is the client API for TemplateFolderService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type TemplateFolderServiceClient interface {
	// template rpc methods
	CreateTemplate(ctx context.Context, in *CreateTemplateReq, opts ...grpc.CallOption) (*Template, error)
	GetListTemplate(ctx context.Context, in *GetListTemplateReq, opts ...grpc.CallOption) (*GetListTemplateRes, error)
	GetSingleTemplate(ctx context.Context, in *GetSingleTemplateReq, opts ...grpc.CallOption) (*Template, error)
	UpdateTemplate(ctx context.Context, in *UpdateTemplateReq, opts ...grpc.CallOption) (*Template, error)
	DeleteTemplate(ctx context.Context, in *DeleteTemplateReq, opts ...grpc.CallOption) (*emptypb.Empty, error)
	GetTemplateObjectCommits(ctx context.Context, in *GetTemplateObjectCommitsReq, opts ...grpc.CallOption) (*GetListTemplateRes, error)
	// folder rpc methods
	CreateFolder(ctx context.Context, in *CreateFolderReq, opts ...grpc.CallOption) (*Folder, error)
	GetListFolder(ctx context.Context, in *GetListFolderReq, opts ...grpc.CallOption) (*GetListFolderRes, error)
	GetSingleFolder(ctx context.Context, in *GetSingleFolderReq, opts ...grpc.CallOption) (*GetSingleFolderRes, error)
	UpdateFolder(ctx context.Context, in *UpdateFolderReq, opts ...grpc.CallOption) (*Folder, error)
	DeleteFolder(ctx context.Context, in *DeleteFolderReq, opts ...grpc.CallOption) (*emptypb.Empty, error)
	GetTemplateFolderObjectCommits(ctx context.Context, in *GetTemplateFolderObjectCommitsReq, opts ...grpc.CallOption) (*GetListFolderRes, error)
	// generate html and pdf document
	ConvertHtmlToPdf(ctx context.Context, in *HtmlBody, opts ...grpc.CallOption) (*PdfBody, error)
	ConvertTemplateToHtml(ctx context.Context, in *HtmlBody, opts ...grpc.CallOption) (*HtmlBody, error)
}

type templateFolderServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewTemplateFolderServiceClient(cc grpc.ClientConnInterface) TemplateFolderServiceClient {
	return &templateFolderServiceClient{cc}
}

func (c *templateFolderServiceClient) CreateTemplate(ctx context.Context, in *CreateTemplateReq, opts ...grpc.CallOption) (*Template, error) {
	out := new(Template)
	err := c.cc.Invoke(ctx, "/template_service.TemplateFolderService/CreateTemplate", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *templateFolderServiceClient) GetListTemplate(ctx context.Context, in *GetListTemplateReq, opts ...grpc.CallOption) (*GetListTemplateRes, error) {
	out := new(GetListTemplateRes)
	err := c.cc.Invoke(ctx, "/template_service.TemplateFolderService/GetListTemplate", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *templateFolderServiceClient) GetSingleTemplate(ctx context.Context, in *GetSingleTemplateReq, opts ...grpc.CallOption) (*Template, error) {
	out := new(Template)
	err := c.cc.Invoke(ctx, "/template_service.TemplateFolderService/GetSingleTemplate", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *templateFolderServiceClient) UpdateTemplate(ctx context.Context, in *UpdateTemplateReq, opts ...grpc.CallOption) (*Template, error) {
	out := new(Template)
	err := c.cc.Invoke(ctx, "/template_service.TemplateFolderService/UpdateTemplate", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *templateFolderServiceClient) DeleteTemplate(ctx context.Context, in *DeleteTemplateReq, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/template_service.TemplateFolderService/DeleteTemplate", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *templateFolderServiceClient) GetTemplateObjectCommits(ctx context.Context, in *GetTemplateObjectCommitsReq, opts ...grpc.CallOption) (*GetListTemplateRes, error) {
	out := new(GetListTemplateRes)
	err := c.cc.Invoke(ctx, "/template_service.TemplateFolderService/GetTemplateObjectCommits", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *templateFolderServiceClient) CreateFolder(ctx context.Context, in *CreateFolderReq, opts ...grpc.CallOption) (*Folder, error) {
	out := new(Folder)
	err := c.cc.Invoke(ctx, "/template_service.TemplateFolderService/CreateFolder", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *templateFolderServiceClient) GetListFolder(ctx context.Context, in *GetListFolderReq, opts ...grpc.CallOption) (*GetListFolderRes, error) {
	out := new(GetListFolderRes)
	err := c.cc.Invoke(ctx, "/template_service.TemplateFolderService/GetListFolder", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *templateFolderServiceClient) GetSingleFolder(ctx context.Context, in *GetSingleFolderReq, opts ...grpc.CallOption) (*GetSingleFolderRes, error) {
	out := new(GetSingleFolderRes)
	err := c.cc.Invoke(ctx, "/template_service.TemplateFolderService/GetSingleFolder", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *templateFolderServiceClient) UpdateFolder(ctx context.Context, in *UpdateFolderReq, opts ...grpc.CallOption) (*Folder, error) {
	out := new(Folder)
	err := c.cc.Invoke(ctx, "/template_service.TemplateFolderService/UpdateFolder", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *templateFolderServiceClient) DeleteFolder(ctx context.Context, in *DeleteFolderReq, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/template_service.TemplateFolderService/DeleteFolder", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *templateFolderServiceClient) GetTemplateFolderObjectCommits(ctx context.Context, in *GetTemplateFolderObjectCommitsReq, opts ...grpc.CallOption) (*GetListFolderRes, error) {
	out := new(GetListFolderRes)
	err := c.cc.Invoke(ctx, "/template_service.TemplateFolderService/GetTemplateFolderObjectCommits", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *templateFolderServiceClient) ConvertHtmlToPdf(ctx context.Context, in *HtmlBody, opts ...grpc.CallOption) (*PdfBody, error) {
	out := new(PdfBody)
	err := c.cc.Invoke(ctx, "/template_service.TemplateFolderService/ConvertHtmlToPdf", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *templateFolderServiceClient) ConvertTemplateToHtml(ctx context.Context, in *HtmlBody, opts ...grpc.CallOption) (*HtmlBody, error) {
	out := new(HtmlBody)
	err := c.cc.Invoke(ctx, "/template_service.TemplateFolderService/ConvertTemplateToHtml", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// TemplateFolderServiceServer is the server API for TemplateFolderService service.
// All implementations must embed UnimplementedTemplateFolderServiceServer
// for forward compatibility
type TemplateFolderServiceServer interface {
	// template rpc methods
	CreateTemplate(context.Context, *CreateTemplateReq) (*Template, error)
	GetListTemplate(context.Context, *GetListTemplateReq) (*GetListTemplateRes, error)
	GetSingleTemplate(context.Context, *GetSingleTemplateReq) (*Template, error)
	UpdateTemplate(context.Context, *UpdateTemplateReq) (*Template, error)
	DeleteTemplate(context.Context, *DeleteTemplateReq) (*emptypb.Empty, error)
	GetTemplateObjectCommits(context.Context, *GetTemplateObjectCommitsReq) (*GetListTemplateRes, error)
	// folder rpc methods
	CreateFolder(context.Context, *CreateFolderReq) (*Folder, error)
	GetListFolder(context.Context, *GetListFolderReq) (*GetListFolderRes, error)
	GetSingleFolder(context.Context, *GetSingleFolderReq) (*GetSingleFolderRes, error)
	UpdateFolder(context.Context, *UpdateFolderReq) (*Folder, error)
	DeleteFolder(context.Context, *DeleteFolderReq) (*emptypb.Empty, error)
	GetTemplateFolderObjectCommits(context.Context, *GetTemplateFolderObjectCommitsReq) (*GetListFolderRes, error)
	// generate html and pdf document
	ConvertHtmlToPdf(context.Context, *HtmlBody) (*PdfBody, error)
	ConvertTemplateToHtml(context.Context, *HtmlBody) (*HtmlBody, error)
	mustEmbedUnimplementedTemplateFolderServiceServer()
}

// UnimplementedTemplateFolderServiceServer must be embedded to have forward compatible implementations.
type UnimplementedTemplateFolderServiceServer struct {
}

func (UnimplementedTemplateFolderServiceServer) CreateTemplate(context.Context, *CreateTemplateReq) (*Template, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateTemplate not implemented")
}
func (UnimplementedTemplateFolderServiceServer) GetListTemplate(context.Context, *GetListTemplateReq) (*GetListTemplateRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetListTemplate not implemented")
}
func (UnimplementedTemplateFolderServiceServer) GetSingleTemplate(context.Context, *GetSingleTemplateReq) (*Template, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetSingleTemplate not implemented")
}
func (UnimplementedTemplateFolderServiceServer) UpdateTemplate(context.Context, *UpdateTemplateReq) (*Template, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateTemplate not implemented")
}
func (UnimplementedTemplateFolderServiceServer) DeleteTemplate(context.Context, *DeleteTemplateReq) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteTemplate not implemented")
}
func (UnimplementedTemplateFolderServiceServer) GetTemplateObjectCommits(context.Context, *GetTemplateObjectCommitsReq) (*GetListTemplateRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetTemplateObjectCommits not implemented")
}
func (UnimplementedTemplateFolderServiceServer) CreateFolder(context.Context, *CreateFolderReq) (*Folder, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateFolder not implemented")
}
func (UnimplementedTemplateFolderServiceServer) GetListFolder(context.Context, *GetListFolderReq) (*GetListFolderRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetListFolder not implemented")
}
func (UnimplementedTemplateFolderServiceServer) GetSingleFolder(context.Context, *GetSingleFolderReq) (*GetSingleFolderRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetSingleFolder not implemented")
}
func (UnimplementedTemplateFolderServiceServer) UpdateFolder(context.Context, *UpdateFolderReq) (*Folder, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateFolder not implemented")
}
func (UnimplementedTemplateFolderServiceServer) DeleteFolder(context.Context, *DeleteFolderReq) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteFolder not implemented")
}
func (UnimplementedTemplateFolderServiceServer) GetTemplateFolderObjectCommits(context.Context, *GetTemplateFolderObjectCommitsReq) (*GetListFolderRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetTemplateFolderObjectCommits not implemented")
}
func (UnimplementedTemplateFolderServiceServer) ConvertHtmlToPdf(context.Context, *HtmlBody) (*PdfBody, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ConvertHtmlToPdf not implemented")
}
func (UnimplementedTemplateFolderServiceServer) ConvertTemplateToHtml(context.Context, *HtmlBody) (*HtmlBody, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ConvertTemplateToHtml not implemented")
}
func (UnimplementedTemplateFolderServiceServer) mustEmbedUnimplementedTemplateFolderServiceServer() {}

// UnsafeTemplateFolderServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to TemplateFolderServiceServer will
// result in compilation errors.
type UnsafeTemplateFolderServiceServer interface {
	mustEmbedUnimplementedTemplateFolderServiceServer()
}

func RegisterTemplateFolderServiceServer(s grpc.ServiceRegistrar, srv TemplateFolderServiceServer) {
	s.RegisterService(&TemplateFolderService_ServiceDesc, srv)
}

func _TemplateFolderService_CreateTemplate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateTemplateReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TemplateFolderServiceServer).CreateTemplate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/template_service.TemplateFolderService/CreateTemplate",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TemplateFolderServiceServer).CreateTemplate(ctx, req.(*CreateTemplateReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _TemplateFolderService_GetListTemplate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetListTemplateReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TemplateFolderServiceServer).GetListTemplate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/template_service.TemplateFolderService/GetListTemplate",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TemplateFolderServiceServer).GetListTemplate(ctx, req.(*GetListTemplateReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _TemplateFolderService_GetSingleTemplate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetSingleTemplateReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TemplateFolderServiceServer).GetSingleTemplate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/template_service.TemplateFolderService/GetSingleTemplate",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TemplateFolderServiceServer).GetSingleTemplate(ctx, req.(*GetSingleTemplateReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _TemplateFolderService_UpdateTemplate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateTemplateReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TemplateFolderServiceServer).UpdateTemplate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/template_service.TemplateFolderService/UpdateTemplate",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TemplateFolderServiceServer).UpdateTemplate(ctx, req.(*UpdateTemplateReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _TemplateFolderService_DeleteTemplate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteTemplateReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TemplateFolderServiceServer).DeleteTemplate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/template_service.TemplateFolderService/DeleteTemplate",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TemplateFolderServiceServer).DeleteTemplate(ctx, req.(*DeleteTemplateReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _TemplateFolderService_GetTemplateObjectCommits_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetTemplateObjectCommitsReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TemplateFolderServiceServer).GetTemplateObjectCommits(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/template_service.TemplateFolderService/GetTemplateObjectCommits",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TemplateFolderServiceServer).GetTemplateObjectCommits(ctx, req.(*GetTemplateObjectCommitsReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _TemplateFolderService_CreateFolder_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateFolderReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TemplateFolderServiceServer).CreateFolder(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/template_service.TemplateFolderService/CreateFolder",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TemplateFolderServiceServer).CreateFolder(ctx, req.(*CreateFolderReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _TemplateFolderService_GetListFolder_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetListFolderReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TemplateFolderServiceServer).GetListFolder(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/template_service.TemplateFolderService/GetListFolder",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TemplateFolderServiceServer).GetListFolder(ctx, req.(*GetListFolderReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _TemplateFolderService_GetSingleFolder_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetSingleFolderReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TemplateFolderServiceServer).GetSingleFolder(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/template_service.TemplateFolderService/GetSingleFolder",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TemplateFolderServiceServer).GetSingleFolder(ctx, req.(*GetSingleFolderReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _TemplateFolderService_UpdateFolder_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateFolderReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TemplateFolderServiceServer).UpdateFolder(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/template_service.TemplateFolderService/UpdateFolder",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TemplateFolderServiceServer).UpdateFolder(ctx, req.(*UpdateFolderReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _TemplateFolderService_DeleteFolder_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteFolderReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TemplateFolderServiceServer).DeleteFolder(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/template_service.TemplateFolderService/DeleteFolder",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TemplateFolderServiceServer).DeleteFolder(ctx, req.(*DeleteFolderReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _TemplateFolderService_GetTemplateFolderObjectCommits_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetTemplateFolderObjectCommitsReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TemplateFolderServiceServer).GetTemplateFolderObjectCommits(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/template_service.TemplateFolderService/GetTemplateFolderObjectCommits",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TemplateFolderServiceServer).GetTemplateFolderObjectCommits(ctx, req.(*GetTemplateFolderObjectCommitsReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _TemplateFolderService_ConvertHtmlToPdf_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(HtmlBody)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TemplateFolderServiceServer).ConvertHtmlToPdf(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/template_service.TemplateFolderService/ConvertHtmlToPdf",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TemplateFolderServiceServer).ConvertHtmlToPdf(ctx, req.(*HtmlBody))
	}
	return interceptor(ctx, in, info, handler)
}

func _TemplateFolderService_ConvertTemplateToHtml_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(HtmlBody)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TemplateFolderServiceServer).ConvertTemplateToHtml(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/template_service.TemplateFolderService/ConvertTemplateToHtml",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TemplateFolderServiceServer).ConvertTemplateToHtml(ctx, req.(*HtmlBody))
	}
	return interceptor(ctx, in, info, handler)
}

// TemplateFolderService_ServiceDesc is the grpc.ServiceDesc for TemplateFolderService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var TemplateFolderService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "template_service.TemplateFolderService",
	HandlerType: (*TemplateFolderServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateTemplate",
			Handler:    _TemplateFolderService_CreateTemplate_Handler,
		},
		{
			MethodName: "GetListTemplate",
			Handler:    _TemplateFolderService_GetListTemplate_Handler,
		},
		{
			MethodName: "GetSingleTemplate",
			Handler:    _TemplateFolderService_GetSingleTemplate_Handler,
		},
		{
			MethodName: "UpdateTemplate",
			Handler:    _TemplateFolderService_UpdateTemplate_Handler,
		},
		{
			MethodName: "DeleteTemplate",
			Handler:    _TemplateFolderService_DeleteTemplate_Handler,
		},
		{
			MethodName: "GetTemplateObjectCommits",
			Handler:    _TemplateFolderService_GetTemplateObjectCommits_Handler,
		},
		{
			MethodName: "CreateFolder",
			Handler:    _TemplateFolderService_CreateFolder_Handler,
		},
		{
			MethodName: "GetListFolder",
			Handler:    _TemplateFolderService_GetListFolder_Handler,
		},
		{
			MethodName: "GetSingleFolder",
			Handler:    _TemplateFolderService_GetSingleFolder_Handler,
		},
		{
			MethodName: "UpdateFolder",
			Handler:    _TemplateFolderService_UpdateFolder_Handler,
		},
		{
			MethodName: "DeleteFolder",
			Handler:    _TemplateFolderService_DeleteFolder_Handler,
		},
		{
			MethodName: "GetTemplateFolderObjectCommits",
			Handler:    _TemplateFolderService_GetTemplateFolderObjectCommits_Handler,
		},
		{
			MethodName: "ConvertHtmlToPdf",
			Handler:    _TemplateFolderService_ConvertHtmlToPdf_Handler,
		},
		{
			MethodName: "ConvertTemplateToHtml",
			Handler:    _TemplateFolderService_ConvertTemplateToHtml_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "template.proto",
}
