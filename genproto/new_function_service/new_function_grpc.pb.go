// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.17.3
// source: new_function.proto

package new_function_service

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// FunctionServiceV2Client is the client API for FunctionServiceV2 service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type FunctionServiceV2Client interface {
	Create(ctx context.Context, in *CreateFunctionRequest, opts ...grpc.CallOption) (*Function, error)
	GetList(ctx context.Context, in *GetAllFunctionsRequest, opts ...grpc.CallOption) (*GetAllFunctionsResponse, error)
	GetSingle(ctx context.Context, in *FunctionPrimaryKey, opts ...grpc.CallOption) (*Function, error)
	Update(ctx context.Context, in *Function, opts ...grpc.CallOption) (*emptypb.Empty, error)
	Delete(ctx context.Context, in *FunctionPrimaryKey, opts ...grpc.CallOption) (*emptypb.Empty, error)
	GetListByRequestTime(ctx context.Context, in *GetListByRequestTimeRequest, opts ...grpc.CallOption) (*GetAllFunctionsResponse, error)
	UpdateManyByRequestTime(ctx context.Context, in *UpdateManyUrlAndPassword, opts ...grpc.CallOption) (*emptypb.Empty, error)
}

type functionServiceV2Client struct {
	cc grpc.ClientConnInterface
}

func NewFunctionServiceV2Client(cc grpc.ClientConnInterface) FunctionServiceV2Client {
	return &functionServiceV2Client{cc}
}

func (c *functionServiceV2Client) Create(ctx context.Context, in *CreateFunctionRequest, opts ...grpc.CallOption) (*Function, error) {
	out := new(Function)
	err := c.cc.Invoke(ctx, "/new_function_service.FunctionServiceV2/Create", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *functionServiceV2Client) GetList(ctx context.Context, in *GetAllFunctionsRequest, opts ...grpc.CallOption) (*GetAllFunctionsResponse, error) {
	out := new(GetAllFunctionsResponse)
	err := c.cc.Invoke(ctx, "/new_function_service.FunctionServiceV2/GetList", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *functionServiceV2Client) GetSingle(ctx context.Context, in *FunctionPrimaryKey, opts ...grpc.CallOption) (*Function, error) {
	out := new(Function)
	err := c.cc.Invoke(ctx, "/new_function_service.FunctionServiceV2/GetSingle", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *functionServiceV2Client) Update(ctx context.Context, in *Function, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/new_function_service.FunctionServiceV2/Update", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *functionServiceV2Client) Delete(ctx context.Context, in *FunctionPrimaryKey, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/new_function_service.FunctionServiceV2/Delete", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *functionServiceV2Client) GetListByRequestTime(ctx context.Context, in *GetListByRequestTimeRequest, opts ...grpc.CallOption) (*GetAllFunctionsResponse, error) {
	out := new(GetAllFunctionsResponse)
	err := c.cc.Invoke(ctx, "/new_function_service.FunctionServiceV2/GetListByRequestTime", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *functionServiceV2Client) UpdateManyByRequestTime(ctx context.Context, in *UpdateManyUrlAndPassword, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/new_function_service.FunctionServiceV2/UpdateManyByRequestTime", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// FunctionServiceV2Server is the server API for FunctionServiceV2 service.
// All implementations must embed UnimplementedFunctionServiceV2Server
// for forward compatibility
type FunctionServiceV2Server interface {
	Create(context.Context, *CreateFunctionRequest) (*Function, error)
	GetList(context.Context, *GetAllFunctionsRequest) (*GetAllFunctionsResponse, error)
	GetSingle(context.Context, *FunctionPrimaryKey) (*Function, error)
	Update(context.Context, *Function) (*emptypb.Empty, error)
	Delete(context.Context, *FunctionPrimaryKey) (*emptypb.Empty, error)
	GetListByRequestTime(context.Context, *GetListByRequestTimeRequest) (*GetAllFunctionsResponse, error)
	UpdateManyByRequestTime(context.Context, *UpdateManyUrlAndPassword) (*emptypb.Empty, error)
	mustEmbedUnimplementedFunctionServiceV2Server()
}

// UnimplementedFunctionServiceV2Server must be embedded to have forward compatible implementations.
type UnimplementedFunctionServiceV2Server struct {
}

func (UnimplementedFunctionServiceV2Server) Create(context.Context, *CreateFunctionRequest) (*Function, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Create not implemented")
}
func (UnimplementedFunctionServiceV2Server) GetList(context.Context, *GetAllFunctionsRequest) (*GetAllFunctionsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetList not implemented")
}
func (UnimplementedFunctionServiceV2Server) GetSingle(context.Context, *FunctionPrimaryKey) (*Function, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetSingle not implemented")
}
func (UnimplementedFunctionServiceV2Server) Update(context.Context, *Function) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Update not implemented")
}
func (UnimplementedFunctionServiceV2Server) Delete(context.Context, *FunctionPrimaryKey) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Delete not implemented")
}
func (UnimplementedFunctionServiceV2Server) GetListByRequestTime(context.Context, *GetListByRequestTimeRequest) (*GetAllFunctionsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetListByRequestTime not implemented")
}
func (UnimplementedFunctionServiceV2Server) UpdateManyByRequestTime(context.Context, *UpdateManyUrlAndPassword) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateManyByRequestTime not implemented")
}
func (UnimplementedFunctionServiceV2Server) mustEmbedUnimplementedFunctionServiceV2Server() {}

// UnsafeFunctionServiceV2Server may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to FunctionServiceV2Server will
// result in compilation errors.
type UnsafeFunctionServiceV2Server interface {
	mustEmbedUnimplementedFunctionServiceV2Server()
}

func RegisterFunctionServiceV2Server(s grpc.ServiceRegistrar, srv FunctionServiceV2Server) {
	s.RegisterService(&FunctionServiceV2_ServiceDesc, srv)
}

func _FunctionServiceV2_Create_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateFunctionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FunctionServiceV2Server).Create(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/new_function_service.FunctionServiceV2/Create",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FunctionServiceV2Server).Create(ctx, req.(*CreateFunctionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _FunctionServiceV2_GetList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetAllFunctionsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FunctionServiceV2Server).GetList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/new_function_service.FunctionServiceV2/GetList",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FunctionServiceV2Server).GetList(ctx, req.(*GetAllFunctionsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _FunctionServiceV2_GetSingle_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FunctionPrimaryKey)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FunctionServiceV2Server).GetSingle(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/new_function_service.FunctionServiceV2/GetSingle",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FunctionServiceV2Server).GetSingle(ctx, req.(*FunctionPrimaryKey))
	}
	return interceptor(ctx, in, info, handler)
}

func _FunctionServiceV2_Update_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Function)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FunctionServiceV2Server).Update(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/new_function_service.FunctionServiceV2/Update",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FunctionServiceV2Server).Update(ctx, req.(*Function))
	}
	return interceptor(ctx, in, info, handler)
}

func _FunctionServiceV2_Delete_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FunctionPrimaryKey)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FunctionServiceV2Server).Delete(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/new_function_service.FunctionServiceV2/Delete",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FunctionServiceV2Server).Delete(ctx, req.(*FunctionPrimaryKey))
	}
	return interceptor(ctx, in, info, handler)
}

func _FunctionServiceV2_GetListByRequestTime_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetListByRequestTimeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FunctionServiceV2Server).GetListByRequestTime(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/new_function_service.FunctionServiceV2/GetListByRequestTime",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FunctionServiceV2Server).GetListByRequestTime(ctx, req.(*GetListByRequestTimeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _FunctionServiceV2_UpdateManyByRequestTime_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateManyUrlAndPassword)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FunctionServiceV2Server).UpdateManyByRequestTime(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/new_function_service.FunctionServiceV2/UpdateManyByRequestTime",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FunctionServiceV2Server).UpdateManyByRequestTime(ctx, req.(*UpdateManyUrlAndPassword))
	}
	return interceptor(ctx, in, info, handler)
}

// FunctionServiceV2_ServiceDesc is the grpc.ServiceDesc for FunctionServiceV2 service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var FunctionServiceV2_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "new_function_service.FunctionServiceV2",
	HandlerType: (*FunctionServiceV2Server)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Create",
			Handler:    _FunctionServiceV2_Create_Handler,
		},
		{
			MethodName: "GetList",
			Handler:    _FunctionServiceV2_GetList_Handler,
		},
		{
			MethodName: "GetSingle",
			Handler:    _FunctionServiceV2_GetSingle_Handler,
		},
		{
			MethodName: "Update",
			Handler:    _FunctionServiceV2_Update_Handler,
		},
		{
			MethodName: "Delete",
			Handler:    _FunctionServiceV2_Delete_Handler,
		},
		{
			MethodName: "GetListByRequestTime",
			Handler:    _FunctionServiceV2_GetListByRequestTime_Handler,
		},
		{
			MethodName: "UpdateManyByRequestTime",
			Handler:    _FunctionServiceV2_UpdateManyByRequestTime_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "new_function.proto",
}
