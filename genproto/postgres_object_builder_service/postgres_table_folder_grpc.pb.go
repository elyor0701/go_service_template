// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.17.3
// source: postgres_table_folder.proto

package postgres_object_builder_service

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// TableFolderServiceClient is the client API for TableFolderService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type TableFolderServiceClient interface {
	Create(ctx context.Context, in *TableFolderRequest, opts ...grpc.CallOption) (*CreateTableFolderResponse, error)
	GetByID(ctx context.Context, in *TableFolderPrimaryKey, opts ...grpc.CallOption) (*TableFolder, error)
	GetAll(ctx context.Context, in *GetAllTableFoldersRequest, opts ...grpc.CallOption) (*GetAllTableFoldersResponse, error)
	Update(ctx context.Context, in *TableFolder, opts ...grpc.CallOption) (*emptypb.Empty, error)
	Delete(ctx context.Context, in *TableFolderPrimaryKey, opts ...grpc.CallOption) (*emptypb.Empty, error)
}

type tableFolderServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewTableFolderServiceClient(cc grpc.ClientConnInterface) TableFolderServiceClient {
	return &tableFolderServiceClient{cc}
}

func (c *tableFolderServiceClient) Create(ctx context.Context, in *TableFolderRequest, opts ...grpc.CallOption) (*CreateTableFolderResponse, error) {
	out := new(CreateTableFolderResponse)
	err := c.cc.Invoke(ctx, "/postgres_object_builder_service.TableFolderService/Create", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tableFolderServiceClient) GetByID(ctx context.Context, in *TableFolderPrimaryKey, opts ...grpc.CallOption) (*TableFolder, error) {
	out := new(TableFolder)
	err := c.cc.Invoke(ctx, "/postgres_object_builder_service.TableFolderService/GetByID", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tableFolderServiceClient) GetAll(ctx context.Context, in *GetAllTableFoldersRequest, opts ...grpc.CallOption) (*GetAllTableFoldersResponse, error) {
	out := new(GetAllTableFoldersResponse)
	err := c.cc.Invoke(ctx, "/postgres_object_builder_service.TableFolderService/GetAll", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tableFolderServiceClient) Update(ctx context.Context, in *TableFolder, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/postgres_object_builder_service.TableFolderService/Update", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tableFolderServiceClient) Delete(ctx context.Context, in *TableFolderPrimaryKey, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/postgres_object_builder_service.TableFolderService/Delete", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// TableFolderServiceServer is the server API for TableFolderService service.
// All implementations must embed UnimplementedTableFolderServiceServer
// for forward compatibility
type TableFolderServiceServer interface {
	Create(context.Context, *TableFolderRequest) (*CreateTableFolderResponse, error)
	GetByID(context.Context, *TableFolderPrimaryKey) (*TableFolder, error)
	GetAll(context.Context, *GetAllTableFoldersRequest) (*GetAllTableFoldersResponse, error)
	Update(context.Context, *TableFolder) (*emptypb.Empty, error)
	Delete(context.Context, *TableFolderPrimaryKey) (*emptypb.Empty, error)
	mustEmbedUnimplementedTableFolderServiceServer()
}

// UnimplementedTableFolderServiceServer must be embedded to have forward compatible implementations.
type UnimplementedTableFolderServiceServer struct {
}

func (UnimplementedTableFolderServiceServer) Create(context.Context, *TableFolderRequest) (*CreateTableFolderResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Create not implemented")
}
func (UnimplementedTableFolderServiceServer) GetByID(context.Context, *TableFolderPrimaryKey) (*TableFolder, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetByID not implemented")
}
func (UnimplementedTableFolderServiceServer) GetAll(context.Context, *GetAllTableFoldersRequest) (*GetAllTableFoldersResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAll not implemented")
}
func (UnimplementedTableFolderServiceServer) Update(context.Context, *TableFolder) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Update not implemented")
}
func (UnimplementedTableFolderServiceServer) Delete(context.Context, *TableFolderPrimaryKey) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Delete not implemented")
}
func (UnimplementedTableFolderServiceServer) mustEmbedUnimplementedTableFolderServiceServer() {}

// UnsafeTableFolderServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to TableFolderServiceServer will
// result in compilation errors.
type UnsafeTableFolderServiceServer interface {
	mustEmbedUnimplementedTableFolderServiceServer()
}

func RegisterTableFolderServiceServer(s grpc.ServiceRegistrar, srv TableFolderServiceServer) {
	s.RegisterService(&TableFolderService_ServiceDesc, srv)
}

func _TableFolderService_Create_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TableFolderRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TableFolderServiceServer).Create(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/postgres_object_builder_service.TableFolderService/Create",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TableFolderServiceServer).Create(ctx, req.(*TableFolderRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TableFolderService_GetByID_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TableFolderPrimaryKey)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TableFolderServiceServer).GetByID(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/postgres_object_builder_service.TableFolderService/GetByID",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TableFolderServiceServer).GetByID(ctx, req.(*TableFolderPrimaryKey))
	}
	return interceptor(ctx, in, info, handler)
}

func _TableFolderService_GetAll_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetAllTableFoldersRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TableFolderServiceServer).GetAll(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/postgres_object_builder_service.TableFolderService/GetAll",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TableFolderServiceServer).GetAll(ctx, req.(*GetAllTableFoldersRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TableFolderService_Update_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TableFolder)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TableFolderServiceServer).Update(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/postgres_object_builder_service.TableFolderService/Update",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TableFolderServiceServer).Update(ctx, req.(*TableFolder))
	}
	return interceptor(ctx, in, info, handler)
}

func _TableFolderService_Delete_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TableFolderPrimaryKey)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TableFolderServiceServer).Delete(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/postgres_object_builder_service.TableFolderService/Delete",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TableFolderServiceServer).Delete(ctx, req.(*TableFolderPrimaryKey))
	}
	return interceptor(ctx, in, info, handler)
}

// TableFolderService_ServiceDesc is the grpc.ServiceDesc for TableFolderService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var TableFolderService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "postgres_object_builder_service.TableFolderService",
	HandlerType: (*TableFolderServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Create",
			Handler:    _TableFolderService_Create_Handler,
		},
		{
			MethodName: "GetByID",
			Handler:    _TableFolderService_GetByID_Handler,
		},
		{
			MethodName: "GetAll",
			Handler:    _TableFolderService_GetAll_Handler,
		},
		{
			MethodName: "Update",
			Handler:    _TableFolderService_Update_Handler,
		},
		{
			MethodName: "Delete",
			Handler:    _TableFolderService_Delete_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "postgres_table_folder.proto",
}
